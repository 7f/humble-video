/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else



// HumbleVideo.i: Start generated code
// >>>>>>>>>>>>>>>>>>>>>>>>>>>
#include <io/humble/ferry/JNIHelper.h>
#include <io/humble/video/KeyValueBag.h>
#include <io/humble/video/Property.h>
#include <io/humble/video/Rational.h>
#include <io/humble/video/PixelFormat.h>
#include <io/humble/video/Media.h>
#include <io/humble/video/MediaRaw.h>
#include <io/humble/video/MediaAudio.h>
#include <io/humble/video/AudioSamples.h>
#include <io/humble/video/VideoPicture.h>
#include <io/humble/video/Error.h>
#include <io/humble/video/Packet.h>
#include <io/humble/video/Configurable.h>
#include <io/humble/video/Global.h>
#include <io/humble/video/Codec.h>
#include <io/humble/video/ContainerFormat.h>
#include <io/humble/video/SinkFormat.h>
#include <io/humble/video/SourceFormat.h>
#include <io/humble/video/IndexEntry.h>
#include <io/humble/video/ContainerStream.h>
#include <io/humble/video/Container.h>
#include <io/humble/video/SourceStream.h>
#include <io/humble/video/Source.h>

using namespace VS_CPP_NAMESPACE;

extern "C" {

SWIGEXPORT void JNICALL
Java_io_humble_video_Video_init(JNIEnv *env, jclass)
{
  JavaVM* vm=0;
  if (!io::humble::ferry::JNIHelper::sGetVM()) {
    env->GetJavaVM(&vm);
    io::humble::ferry::JNIHelper::sSetVM(vm);
  }
}

}


// <<<<<<<<<<<<<<<<<<<<<<<<<<<
// HumbleVideo.i: End generated code



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_PixelFormat_1FMT_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::PixelFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::PixelFormat::Type)io::humble::video::PixelFormat::FMT_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_PixelFormat_1FMT_1RGBA64BE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::PixelFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::PixelFormat::Type)io::humble::video::PixelFormat::FMT_RGBA64BE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_PixelFormat_1FMT_10RGB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::PixelFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::PixelFormat::Type)io::humble::video::PixelFormat::FMT_0RGB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_PixelFormat_1YUV_1Y_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::PixelFormat::YUVColorComponent result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::PixelFormat::YUVColorComponent)io::humble::video::PixelFormat::YUV_Y;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_PixelFormat_1YUV_1U_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::PixelFormat::YUVColorComponent result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::PixelFormat::YUVColorComponent)io::humble::video::PixelFormat::YUV_U;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_PixelFormat_1YUV_1V_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::PixelFormat::YUVColorComponent result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::PixelFormat::YUVColorComponent)io::humble::video::PixelFormat::YUV_V;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Rational_1ROUND_1ZERO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Rational::Rounding result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Rational::Rounding)io::humble::video::Rational::ROUND_ZERO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Rational_1ROUND_1INF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Rational::Rounding result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Rational::Rounding)io::humble::video::Rational::ROUND_INF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Rational_1ROUND_1DOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Rational::Rounding result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Rational::Rounding)io::humble::video::Rational::ROUND_DOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Rational_1ROUND_1UP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Rational::Rounding result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Rational::Rounding)io::humble::video::Rational::ROUND_UP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Rational_1ROUND_1NEAR_1INF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Rational::Rounding result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Rational::Rounding)io::humble::video::Rational::ROUND_NEAR_INF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Rational_1ROUND_1PASS_1MINMAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Rational::Rounding result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Rational::Rounding)io::humble::video::Rational::ROUND_PASS_MINMAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Rational_1getNumerator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getNumerator();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Rational_1getDenominator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getDenominator();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Rational_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)(arg1)->copy();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Rational_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *arg2 = (io::humble::video::Rational *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  arg2 = *(io::humble::video::Rational **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->compareTo(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Rational_1sCompareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *arg2 = (io::humble::video::Rational *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  arg2 = *(io::humble::video::Rational **)&jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)io::humble::video::Rational::sCompareTo(arg1,arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_io_humble_video_VideoJNI_Rational_1getDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (double)(arg1)->getDouble();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Rational_1reduce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->reduce(arg2,arg3,arg4);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Rational_1sReduce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)io::humble::video::Rational::sReduce(arg1,arg2,arg3,arg4);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Rational_1multiply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *arg2 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  arg2 = *(io::humble::video::Rational **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)(arg1)->multiply(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Rational_1sMultiply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *arg2 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  arg2 = *(io::humble::video::Rational **)&jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)io::humble::video::Rational::sMultiply(arg1,arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Rational_1divide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *arg2 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  arg2 = *(io::humble::video::Rational **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)(arg1)->divide(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Rational_1sDivide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *arg2 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  arg2 = *(io::humble::video::Rational **)&jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)io::humble::video::Rational::sDivide(arg1,arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Rational_1subtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *arg2 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  arg2 = *(io::humble::video::Rational **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)(arg1)->subtract(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Rational_1sSubtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *arg2 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  arg2 = *(io::humble::video::Rational **)&jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)io::humble::video::Rational::sSubtract(arg1,arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Rational_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *arg2 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  arg2 = *(io::humble::video::Rational **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)(arg1)->add(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Rational_1sAdd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *arg2 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  arg2 = *(io::humble::video::Rational **)&jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)io::humble::video::Rational::sAdd(arg1,arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Rational_1rescale_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  int64_t arg2 ;
  io::humble::video::Rational *arg3 = (io::humble::video::Rational *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = *(io::humble::video::Rational **)&jarg3; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->rescale(arg2,arg3);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Rational_1sRescale_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  io::humble::video::Rational *arg2 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *arg3 = (io::humble::video::Rational *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (int64_t)jarg1; 
  arg2 = *(io::humble::video::Rational **)&jarg2; 
  arg3 = *(io::humble::video::Rational **)&jarg3; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)io::humble::video::Rational::sRescale(arg1,arg2,arg3);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Rational_1make_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)io::humble::video::Rational::make();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Rational_1make_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)io::humble::video::Rational::make(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Rational_1make_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)io::humble::video::Rational::make(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Rational_1make_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int32_t arg1 ;
  int32_t arg2 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)io::humble::video::Rational::make(arg1,arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Rational_1rescale_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  int64_t arg2 ;
  io::humble::video::Rational *arg3 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational::Rounding arg4 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = *(io::humble::video::Rational **)&jarg3; 
  arg4 = (io::humble::video::Rational::Rounding)jarg4; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->rescale(arg2,arg3,arg4);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Rational_1sRescale_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  io::humble::video::Rational *arg2 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational *arg3 = (io::humble::video::Rational *) 0 ;
  io::humble::video::Rational::Rounding arg4 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (int64_t)jarg1; 
  arg2 = *(io::humble::video::Rational **)&jarg2; 
  arg3 = *(io::humble::video::Rational **)&jarg3; 
  arg4 = (io::humble::video::Rational::Rounding)jarg4; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)io::humble::video::Rational::sRescale(arg1,arg2,arg3,arg4);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Rational_1rescale_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int32_t arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  int32_t arg5 ;
  io::humble::video::Rational::Rounding arg6 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = (int32_t)jarg5; 
  arg6 = (io::humble::video::Rational::Rounding)jarg6; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)io::humble::video::Rational::rescale(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_Rational_1setNumerator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setNumerator(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_Rational_1setDenominator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setDenominator(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_Rational_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  arg2 = (double)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setValue(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jdouble JNICALL Java_io_humble_video_VideoJNI_Rational_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (double)(arg1)->getValue();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_Rational_1isFinalized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isFinalized();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_Rational_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  io::humble::video::Rational *arg1 = (io::humble::video::Rational *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Rational **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->init();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Global_1NO_1PTS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  result = (long long)io::humble::video::Global::NO_PTS;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Global_1DEFAULT_1PTS_1PER_1SECOND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  result = (long long)io::humble::video::Global::DEFAULT_PTS_PER_SECOND;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Global_1getDefaultTimeBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)io::humble::video::Global::getDefaultTimeBase();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Global_1getVersionMajor(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)io::humble::video::Global::getVersionMajor();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Global_1getVersionMinor(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)io::humble::video::Global::getVersionMinor();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_Global_1getVersionStr(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)io::humble::video::Global::getVersionStr();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Global_1getAVFormatVersion(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)io::humble::video::Global::getAVFormatVersion();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_Global_1getAVFormatVersionStr(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)io::humble::video::Global::getAVFormatVersionStr();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Global_1getAVCodecVersion(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)io::humble::video::Global::getAVCodecVersion();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_Global_1getAVCodecVersionStr(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)io::humble::video::Global::getAVCodecVersionStr();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_Global_1init(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      io::humble::video::Global::init();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_Global_1setFFmpegLoggingLevel(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int32_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      io::humble::video::Global::setFFmpegLoggingLevel(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_KeyValueBag_1KVB_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::KeyValueBag::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::KeyValueBag::Flags)io::humble::video::KeyValueBag::KVB_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_KeyValueBag_1KVB_1MATCH_1CASE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::KeyValueBag::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::KeyValueBag::Flags)io::humble::video::KeyValueBag::KVB_MATCH_CASE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_KeyValueBag_1KVB_1DONT_1OVERWRITE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::KeyValueBag::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::KeyValueBag::Flags)io::humble::video::KeyValueBag::KVB_DONT_OVERWRITE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_KeyValueBag_1KVB_1APPEND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::KeyValueBag::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::KeyValueBag::Flags)io::humble::video::KeyValueBag::KVB_APPEND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_KeyValueBag_1getNumKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::KeyValueBag *arg1 = (io::humble::video::KeyValueBag *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::KeyValueBag **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getNumKeys();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_KeyValueBag_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  io::humble::video::KeyValueBag *arg1 = (io::humble::video::KeyValueBag *) 0 ;
  int32_t arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::KeyValueBag **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getKey(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_KeyValueBag_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jstring jresult = 0 ;
  io::humble::video::KeyValueBag *arg1 = (io::humble::video::KeyValueBag *) 0 ;
  char *arg2 = (char *) 0 ;
  io::humble::video::KeyValueBag::Flags arg3 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::KeyValueBag **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (io::humble::video::KeyValueBag::Flags)jarg3; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getValue((char const *)arg2,arg3);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_KeyValueBag_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  io::humble::video::KeyValueBag *arg1 = (io::humble::video::KeyValueBag *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::KeyValueBag **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->setValue((char const *)arg2,(char const *)arg3);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_KeyValueBag_1make(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  io::humble::video::KeyValueBag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::KeyValueBag *)io::humble::video::KeyValueBag::make();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::KeyValueBag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_KeyValueBag_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  jint jresult = 0 ;
  io::humble::video::KeyValueBag *arg1 = (io::humble::video::KeyValueBag *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  io::humble::video::KeyValueBag::Flags arg4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::KeyValueBag **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (io::humble::video::KeyValueBag::Flags)jarg4; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->setValue((char const *)arg2,(char const *)arg3,arg4);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Property_1PROPERTY_1CONST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Property::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Property::Type)io::humble::video::Property::PROPERTY_CONST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Property_1PROPERTY_1IMAGE_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Property::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Property::Type)io::humble::video::Property::PROPERTY_IMAGE_SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Property_1PROPERTY_1PIXEL_1FMT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Property::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Property::Type)io::humble::video::Property::PROPERTY_PIXEL_FMT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Property_1PROPERTY_1SAMPLE_1FMT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Property::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Property::Type)io::humble::video::Property::PROPERTY_SAMPLE_FMT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Property_1PROPERTY_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Property::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Property::Type)io::humble::video::Property::PROPERTY_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Property_1FLAG_1ENCODING_1PARAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Property::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Property::Flags)io::humble::video::Property::FLAG_ENCODING_PARAM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Property_1FLAG_1DECODING_1PARAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Property::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Property::Flags)io::humble::video::Property::FLAG_DECODING_PARAM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Property_1FLAG_1METADATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Property::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Property::Flags)io::humble::video::Property::FLAG_METADATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Property_1FLAG_1AUDIO_1PARAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Property::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Property::Flags)io::humble::video::Property::FLAG_AUDIO_PARAM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Property_1FLAG_1VIDEO_1PARAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Property::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Property::Flags)io::humble::video::Property::FLAG_VIDEO_PARAM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Property_1FLAG_1SUBTITLE_1PARAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Property::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Property::Flags)io::humble::video::Property::FLAG_SUBTITLE_PARAM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Property_1FLAG_1FILTERING_1PARAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Property::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Property::Flags)io::humble::video::Property::FLAG_FILTERING_PARAM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Property_1PROPERTY_1SEARCH_1DEFAULT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Property::Search result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Property::Search)io::humble::video::Property::PROPERTY_SEARCH_DEFAULT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Property_1PROPERTY_1SEARCH_1CHILDREN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Property::Search result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Property::Search)io::humble::video::Property::PROPERTY_SEARCH_CHILDREN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_Property_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::Property *arg1 = (io::humble::video::Property *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Property **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getName();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_Property_1getHelp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::Property *arg1 = (io::humble::video::Property *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Property **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getHelp();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_Property_1getUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::Property *arg1 = (io::humble::video::Property *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Property **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getUnit();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Property_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Property *arg1 = (io::humble::video::Property *) 0 ;
  io::humble::video::Property::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Property **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Property::Type)(arg1)->getType();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Property_1getFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Property *arg1 = (io::humble::video::Property *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Property **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getFlags();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Property_1getDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::Property *arg1 = (io::humble::video::Property *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Property **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getDefault();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_io_humble_video_VideoJNI_Property_1getDefaultAsDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  io::humble::video::Property *arg1 = (io::humble::video::Property *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Property **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (double)(arg1)->getDefaultAsDouble();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Property_1getNumFlagSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Property *arg1 = (io::humble::video::Property *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Property **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getNumFlagSettings();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Property_1getFlagConstant_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  io::humble::video::Property *arg1 = (io::humble::video::Property *) 0 ;
  int32_t arg2 ;
  io::humble::video::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Property **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Property *)(arg1)->getFlagConstant(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Property_1getFlagConstant_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  io::humble::video::Property *arg1 = (io::humble::video::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  io::humble::video::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Property **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Property *)(arg1)->getFlagConstant((char const *)arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Property **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Media_1getTimeStamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::Media *arg1 = (io::humble::video::Media *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Media **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getTimeStamp();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_Media_1setTimeStamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  io::humble::video::Media *arg1 = (io::humble::video::Media *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Media **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setTimeStamp(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Media_1getTimeBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::Media *arg1 = (io::humble::video::Media *) 0 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Media **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)(arg1)->getTimeBase();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_Media_1isKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  io::humble::video::Media *arg1 = (io::humble::video::Media *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Media **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isKey();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_Media_1isComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  io::humble::video::Media *arg1 = (io::humble::video::Media *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Media **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isComplete();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_MediaEncoded_1setTimeBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  io::humble::video::MediaEncoded *arg1 = (io::humble::video::MediaEncoded *) 0 ;
  io::humble::video::Rational *arg2 = (io::humble::video::Rational *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(io::humble::video::MediaEncoded **)&jarg1; 
  arg2 = *(io::humble::video::Rational **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setTimeBase(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_MediaRaw_1getTimeStamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::MediaRaw *arg1 = (io::humble::video::MediaRaw *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaRaw **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getTimeStamp();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_MediaRaw_1setTimeStamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  io::humble::video::MediaRaw *arg1 = (io::humble::video::MediaRaw *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaRaw **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setTimeStamp(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_MediaRaw_1getTimeBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::MediaRaw *arg1 = (io::humble::video::MediaRaw *) 0 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaRaw **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)(arg1)->getTimeBase();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_MediaRaw_1isKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  io::humble::video::MediaRaw *arg1 = (io::humble::video::MediaRaw *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaRaw **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isKey();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_MediaRaw_1getPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::MediaRaw *arg1 = (io::humble::video::MediaRaw *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaRaw **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getPts();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_MediaRaw_1getMetaData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::MediaRaw *arg1 = (io::humble::video::MediaRaw *) 0 ;
  io::humble::video::KeyValueBag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaRaw **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::KeyValueBag *)(arg1)->getMetaData();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::KeyValueBag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_MediaRaw_1getPacketPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::MediaRaw *arg1 = (io::humble::video::MediaRaw *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaRaw **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getPacketPts();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_MediaRaw_1getPacketDts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::MediaRaw *arg1 = (io::humble::video::MediaRaw *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaRaw **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getPacketDts();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_MediaRaw_1getPacketSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::MediaRaw *arg1 = (io::humble::video::MediaRaw *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaRaw **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getPacketSize();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_MediaRaw_1getPacketDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::MediaRaw *arg1 = (io::humble::video::MediaRaw *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaRaw **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getPacketDuration();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_MediaRaw_1getBestEffortTimeStamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::MediaRaw *arg1 = (io::humble::video::MediaRaw *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaRaw **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getBestEffortTimeStamp();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_MediaRaw_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::MediaRaw *arg1 = (io::humble::video::MediaRaw *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaRaw **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getSize();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioFormat_1SAMPLE_1FMT_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioFormat::Type)io::humble::video::AudioFormat::SAMPLE_FMT_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioFormat_1SAMPLE_1FMT_1U8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioFormat::Type)io::humble::video::AudioFormat::SAMPLE_FMT_U8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioFormat_1SAMPLE_1FMT_1S16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioFormat::Type)io::humble::video::AudioFormat::SAMPLE_FMT_S16;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioFormat_1SAMPLE_1FMT_1S32_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioFormat::Type)io::humble::video::AudioFormat::SAMPLE_FMT_S32;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioFormat_1SAMPLE_1FMT_1FLT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioFormat::Type)io::humble::video::AudioFormat::SAMPLE_FMT_FLT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioFormat_1SAMPLE_1FMT_1DBL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioFormat::Type)io::humble::video::AudioFormat::SAMPLE_FMT_DBL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioFormat_1SAMPLE_1FMT_1U8P_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioFormat::Type)io::humble::video::AudioFormat::SAMPLE_FMT_U8P;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioFormat_1SAMPLE_1FMT_1S16P_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioFormat::Type)io::humble::video::AudioFormat::SAMPLE_FMT_S16P;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioFormat_1SAMPLE_1FMT_1S32P_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioFormat::Type)io::humble::video::AudioFormat::SAMPLE_FMT_S32P;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioFormat_1SAMPLE_1FMT_1FLTP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioFormat::Type)io::humble::video::AudioFormat::SAMPLE_FMT_FLTP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioFormat_1SAMPLE_1FMT_1DBLP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioFormat::Type)io::humble::video::AudioFormat::SAMPLE_FMT_DBLP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_AudioFormat_1getName(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  io::humble::video::AudioFormat::Type arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::video::AudioFormat::Type)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)io::humble::video::AudioFormat::getName(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioFormat_1getSampleFormat(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  io::humble::video::AudioFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::AudioFormat::Type)io::humble::video::AudioFormat::getSampleFormat((char const *)arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioFormat_1getAlternateSampleFormat(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jint jresult = 0 ;
  io::humble::video::AudioFormat::Type arg1 ;
  bool arg2 ;
  io::humble::video::AudioFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::video::AudioFormat::Type)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::AudioFormat::Type)io::humble::video::AudioFormat::getAlternateSampleFormat(arg1,arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioFormat_1getPackedSampleFormat(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  io::humble::video::AudioFormat::Type arg1 ;
  io::humble::video::AudioFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::video::AudioFormat::Type)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::AudioFormat::Type)io::humble::video::AudioFormat::getPackedSampleFormat(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioFormat_1getPlanarSampleFormat(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  io::humble::video::AudioFormat::Type arg1 ;
  io::humble::video::AudioFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::video::AudioFormat::Type)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::AudioFormat::Type)io::humble::video::AudioFormat::getPlanarSampleFormat(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioFormat_1getBytesPerSample(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  io::humble::video::AudioFormat::Type arg1 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::video::AudioFormat::Type)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)io::humble::video::AudioFormat::getBytesPerSample(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_AudioFormat_1isPlanar(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  io::humble::video::AudioFormat::Type arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::video::AudioFormat::Type)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)io::humble::video::AudioFormat::isPlanar(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1FRONT_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_FRONT_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1FRONT_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_FRONT_RIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1FRONT_1CENTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_FRONT_CENTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LOW_1FREQUENCY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_LOW_FREQUENCY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1BACK_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_BACK_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1BACK_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_BACK_RIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1FRONT_1LEFT_1OF_1CENTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_FRONT_LEFT_OF_CENTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1FRONT_1RIGHT_1OF_1CENTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_FRONT_RIGHT_OF_CENTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1BACK_1CENTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_BACK_CENTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1SIDE_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_SIDE_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1SIDE_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_SIDE_RIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1TOP_1CENTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_TOP_CENTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1TOP_1FRONT_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_TOP_FRONT_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1TOP_1FRONT_1CENTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_TOP_FRONT_CENTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1TOP_1FRONT_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_TOP_FRONT_RIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1TOP_1BACK_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_TOP_BACK_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1TOP_1BACK_1CENTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_TOP_BACK_CENTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1TOP_1BACK_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_TOP_BACK_RIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1STEREO_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_STEREO_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1STEREO_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_STEREO_RIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1WIDE_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_WIDE_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1WIDE_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_WIDE_RIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1SURROUND_1DIRECT_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_SURROUND_DIRECT_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1SURROUND_1DIRECT_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_SURROUND_DIRECT_RIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LOW_1FREQUENCY_12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::CH_LOW_FREQUENCY_2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_1NATIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_NATIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_1MONO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_MONO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_1STEREO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_STEREO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_12POINT1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_2POINT1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_12_11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_2_1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_1SURROUND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_SURROUND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_13POINT1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_3POINT1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_14POINT0_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_4POINT0;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_14POINT1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_4POINT1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_12_12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_2_2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_1QUAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_QUAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_15POINT0_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_5POINT0;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_15POINT1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_5POINT1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_15POINT0_1BACK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_5POINT0_BACK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_15POINT1_1BACK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_5POINT1_BACK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_16POINT0_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_6POINT0;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_16POINT0_1FRONT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_6POINT0_FRONT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_1HEXAGONAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_HEXAGONAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_16POINT1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_6POINT1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_16POINT1_1BACK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_6POINT1_BACK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_16POINT1_1FRONT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_6POINT1_FRONT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_17POINT0_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_7POINT0;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_17POINT0_1FRONT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_7POINT0_FRONT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_17POINT1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_7POINT1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_17POINT1_1WIDE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_7POINT1_WIDE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_17POINT1_1WIDE_1BACK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_7POINT1_WIDE_BACK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_1OCTAGONAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_OCTAGONAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1CH_1LAYOUT_1STEREO_1DOWNMIX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::CH_LAYOUT_STEREO_DOWNMIX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1getChannelBitmask(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)io::humble::video::AudioChannel::getChannelBitmask((char const *)arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1getChannelLayoutString(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  int32_t arg1 ;
  int64_t arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  arg2 = (int64_t)jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)io::humble::video::AudioChannel::getChannelLayoutString(arg1,arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1getNumChannelsInLayout(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout arg1 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::video::AudioChannel::Layout)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)io::humble::video::AudioChannel::getNumChannelsInLayout(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1getDefaultLayout(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::AudioChannel::Layout)io::humble::video::AudioChannel::getDefaultLayout(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1getIndexOfChannelInLayout(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout arg1 ;
  io::humble::video::AudioChannel::Type arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::video::AudioChannel::Layout)jarg1; 
  arg2 = (io::humble::video::AudioChannel::Type)jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)io::humble::video::AudioChannel::getIndexOfChannelInLayout(arg1,arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1getChannelFromLayoutAtIndex(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  io::humble::video::AudioChannel::Layout arg1 ;
  int32_t arg2 ;
  io::humble::video::AudioChannel::Type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::video::AudioChannel::Layout)jarg1; 
  arg2 = (int32_t)jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::AudioChannel::Type)io::humble::video::AudioChannel::getChannelFromLayoutAtIndex(arg1,arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1getChannelName(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  io::humble::video::AudioChannel::Type arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::video::AudioChannel::Type)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)io::humble::video::AudioChannel::getChannelName(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1getChannelDescription(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  io::humble::video::AudioChannel::Type arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::video::AudioChannel::Type)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)io::humble::video::AudioChannel::getChannelDescription(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_AudioChannel_1getLayoutName(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  io::humble::video::AudioChannel::Layout arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::video::AudioChannel::Layout)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)io::humble::video::AudioChannel::getLayoutName(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_MediaAudio_1make_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int32_t arg1 ;
  int32_t arg2 ;
  io::humble::video::AudioFormat::Type arg3 ;
  io::humble::video::MediaAudio *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (io::humble::video::AudioFormat::Type)jarg3; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::MediaAudio *)io::humble::video::MediaAudio::make(arg1,arg2,arg3);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::MediaAudio **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_MediaAudio_1make_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  io::humble::ferry::IBuffer *arg1 = (io::humble::ferry::IBuffer *) 0 ;
  int32_t arg2 ;
  io::humble::video::AudioFormat::Type arg3 ;
  io::humble::video::MediaAudio *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::IBuffer **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (io::humble::video::AudioFormat::Type)jarg3; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::MediaAudio *)io::humble::video::MediaAudio::make(arg1,arg2,arg3);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::MediaAudio **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_MediaAudio_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  io::humble::video::MediaAudio *arg1 = (io::humble::video::MediaAudio *) 0 ;
  int32_t arg2 ;
  io::humble::ferry::IBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaAudio **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::ferry::IBuffer *)(arg1)->getData(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::ferry::IBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_MediaAudio_1getDataPlaneSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::MediaAudio *arg1 = (io::humble::video::MediaAudio *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaAudio **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getDataPlaneSize();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_MediaAudio_1getNumDataPlanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::MediaAudio *arg1 = (io::humble::video::MediaAudio *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaAudio **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getNumDataPlanes();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_MediaAudio_1getMaxNumSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::MediaAudio *arg1 = (io::humble::video::MediaAudio *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaAudio **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getMaxNumSamples();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_MediaAudio_1getBytesPerSample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::MediaAudio *arg1 = (io::humble::video::MediaAudio *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaAudio **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getBytesPerSample();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_MediaAudio_1setComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7) {
  io::humble::video::MediaAudio *arg1 = (io::humble::video::MediaAudio *) 0 ;
  bool arg2 ;
  uint32_t arg3 ;
  int32_t arg4 ;
  int32_t arg5 ;
  io::humble::video::AudioFormat::Type arg6 ;
  int64_t arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaAudio **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = (int32_t)jarg5; 
  arg6 = (io::humble::video::AudioFormat::Type)jarg6; 
  arg7 = (int64_t)jarg7; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setComplete(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_MediaAudio_1getSampleRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::MediaAudio *arg1 = (io::humble::video::MediaAudio *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaAudio **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getSampleRate();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_MediaAudio_1getChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::MediaAudio *arg1 = (io::humble::video::MediaAudio *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaAudio **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getChannels();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_MediaAudio_1getFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::MediaAudio *arg1 = (io::humble::video::MediaAudio *) 0 ;
  io::humble::video::AudioFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaAudio **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::AudioFormat::Type)(arg1)->getFormat();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_MediaAudio_1isComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  io::humble::video::MediaAudio *arg1 = (io::humble::video::MediaAudio *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaAudio **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isComplete();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_MediaAudio_1isKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  io::humble::video::MediaAudio *arg1 = (io::humble::video::MediaAudio *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaAudio **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isKey();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_MediaAudio_1isPlanar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  io::humble::video::MediaAudio *arg1 = (io::humble::video::MediaAudio *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaAudio **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isPlanar();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_MediaAudio_1getChannelLayout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::MediaAudio *arg1 = (io::humble::video::MediaAudio *) 0 ;
  io::humble::video::AudioChannel::Layout result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::MediaAudio **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::AudioChannel::Layout)(arg1)->getChannelLayout();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1SAMPLE_1FMT_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::Format result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::Format)io::humble::video::AudioSamples::SAMPLE_FMT_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1SAMPLE_1FMT_1U8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::Format result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::Format)io::humble::video::AudioSamples::SAMPLE_FMT_U8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1SAMPLE_1FMT_1S16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::Format result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::Format)io::humble::video::AudioSamples::SAMPLE_FMT_S16;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1SAMPLE_1FMT_1S32_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::Format result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::Format)io::humble::video::AudioSamples::SAMPLE_FMT_S32;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1SAMPLE_1FMT_1FLT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::Format result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::Format)io::humble::video::AudioSamples::SAMPLE_FMT_FLT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1SAMPLE_1FMT_1DBL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::Format result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::Format)io::humble::video::AudioSamples::SAMPLE_FMT_DBL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1SAMPLE_1FMT_1U8P_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::Format result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::Format)io::humble::video::AudioSamples::SAMPLE_FMT_U8P;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1SAMPLE_1FMT_1S16P_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::Format result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::Format)io::humble::video::AudioSamples::SAMPLE_FMT_S16P;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1SAMPLE_1FMT_1S32P_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::Format result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::Format)io::humble::video::AudioSamples::SAMPLE_FMT_S32P;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1SAMPLE_1FMT_1FLTP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::Format result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::Format)io::humble::video::AudioSamples::SAMPLE_FMT_FLTP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1SAMPLE_1FMT_1DBLP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::Format result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::Format)io::humble::video::AudioSamples::SAMPLE_FMT_DBLP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1getSampleRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples *arg1 = (io::humble::video::AudioSamples *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::AudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getSampleRate();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1getChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples *arg1 = (io::humble::video::AudioSamples *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::AudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getChannels();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1getSampleSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples *arg1 = (io::humble::video::AudioSamples *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::AudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getSampleSize();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1getFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples *arg1 = (io::humble::video::AudioSamples *) 0 ;
  io::humble::video::AudioSamples::Format result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::AudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::AudioSamples::Format)(arg1)->getFormat();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1isPlanar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  io::humble::video::AudioSamples *arg1 = (io::humble::video::AudioSamples *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::AudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isPlanar();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1getNumSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples *arg1 = (io::humble::video::AudioSamples *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::AudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getNumSamples();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1getMaxBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples *arg1 = (io::humble::video::AudioSamples *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::AudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getMaxBufferSize();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1getMaxSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples *arg1 = (io::humble::video::AudioSamples *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::AudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getMaxSamples();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1getPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::AudioSamples *arg1 = (io::humble::video::AudioSamples *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::AudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getPts();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1setPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  io::humble::video::AudioSamples *arg1 = (io::humble::video::AudioSamples *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::AudioSamples **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setPts(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1getNextPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::AudioSamples *arg1 = (io::humble::video::AudioSamples *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::AudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getNextPts();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1setComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7) {
  io::humble::video::AudioSamples *arg1 = (io::humble::video::AudioSamples *) 0 ;
  bool arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  int32_t arg5 ;
  io::humble::video::AudioSamples::Format arg6 ;
  int64_t arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::AudioSamples **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = (int32_t)jarg5; 
  arg6 = (io::humble::video::AudioSamples::Format)jarg6; 
  arg7 = (int64_t)jarg7; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setComplete(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1samplesToDefaultPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int arg2 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = (int)jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)io::humble::video::AudioSamples::samplesToDefaultPts(arg1,arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1defaultPtsToSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int arg2 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = (int)jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)io::humble::video::AudioSamples::defaultPtsToSamples(arg1,arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1FRONT_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_FRONT_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1FRONT_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_FRONT_RIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1FRONT_1CENTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_FRONT_CENTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LOW_1FREQUENCY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LOW_FREQUENCY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1BACK_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_BACK_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1BACK_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_BACK_RIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1FRONT_1LEFT_1OF_1CENTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_FRONT_LEFT_OF_CENTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1FRONT_1RIGHT_1OF_1CENTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_FRONT_RIGHT_OF_CENTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1BACK_1CENTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_BACK_CENTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1SIDE_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_SIDE_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1SIDE_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_SIDE_RIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1TOP_1CENTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_TOP_CENTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1TOP_1FRONT_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_TOP_FRONT_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1TOP_1FRONT_1CENTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_TOP_FRONT_CENTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1TOP_1FRONT_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_TOP_FRONT_RIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1TOP_1BACK_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_TOP_BACK_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1TOP_1BACK_1CENTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_TOP_BACK_CENTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1TOP_1BACK_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_TOP_BACK_RIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1STEREO_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_STEREO_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1STEREO_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_STEREO_RIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1WIDE_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_WIDE_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1WIDE_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_WIDE_RIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1SURROUND_1DIRECT_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_SURROUND_DIRECT_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1SURROUND_1DIRECT_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_SURROUND_DIRECT_RIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LOW_1FREQUENCY_12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LOW_FREQUENCY_2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_1MONO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_MONO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_1STEREO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_STEREO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_12POINT1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_2POINT1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_12_11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_2_1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_1SURROUND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_SURROUND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_13POINT1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_3POINT1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_14POINT0_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_4POINT0;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_14POINT1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_4POINT1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_12_12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_2_2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_1QUAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_QUAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_15POINT0_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_5POINT0;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_15POINT1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_5POINT1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_15POINT0_1BACK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_5POINT0_BACK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_15POINT1_1BACK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_5POINT1_BACK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_16POINT0_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_6POINT0;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_16POINT0_1FRONT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_6POINT0_FRONT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_1HEXAGONAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_HEXAGONAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_16POINT1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_6POINT1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_16POINT1_1BACK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_6POINT1_BACK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_16POINT1_1FRONT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_6POINT1_FRONT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_17POINT0_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_7POINT0;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_17POINT0_1FRONT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_7POINT0_FRONT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_17POINT1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_7POINT1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_17POINT1_1WIDE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_7POINT1_WIDE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_17POINT1_1WIDE_1BACK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_7POINT1_WIDE_BACK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_1OCTAGONAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_OCTAGONAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1CH_1LAYOUT_1STEREO_1DOWNMIX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::AudioSamples::ChannelLayout result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::AudioSamples::ChannelLayout)io::humble::video::AudioSamples::CH_LAYOUT_STEREO_DOWNMIX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1make_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  io::humble::ferry::IBuffer *arg1 = (io::humble::ferry::IBuffer *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  io::humble::video::AudioSamples::Format arg4 ;
  io::humble::video::AudioSamples *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::IBuffer **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (io::humble::video::AudioSamples::Format)jarg4; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::AudioSamples *)io::humble::video::AudioSamples::make(arg1,arg2,arg3,arg4);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::AudioSamples **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_AudioSamples_1make_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int32_t arg1 ;
  uint32_t arg2 ;
  io::humble::video::AudioSamples::Format arg3 ;
  io::humble::video::AudioSamples *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (io::humble::video::AudioSamples::Format)jarg3; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::AudioSamples *)io::humble::video::AudioSamples::make(arg1,arg2,arg3);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::AudioSamples **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1isKeyFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  io::humble::video::VideoPicture *arg1 = (io::humble::video::VideoPicture *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::VideoPicture **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isKeyFrame();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1setKeyFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  io::humble::video::VideoPicture *arg1 = (io::humble::video::VideoPicture *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::VideoPicture **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setKeyFrame(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1isComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  io::humble::video::VideoPicture *arg1 = (io::humble::video::VideoPicture *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::VideoPicture **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isComplete();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::VideoPicture *arg1 = (io::humble::video::VideoPicture *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::VideoPicture **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getSize();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::VideoPicture *arg1 = (io::humble::video::VideoPicture *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::VideoPicture **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)(arg1)->getWidth();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::VideoPicture *arg1 = (io::humble::video::VideoPicture *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::VideoPicture **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)(arg1)->getHeight();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1getPixelType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::VideoPicture *arg1 = (io::humble::video::VideoPicture *) 0 ;
  io::humble::video::PixelFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::VideoPicture **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::PixelFormat::Type)(arg1)->getPixelType();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1getPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::VideoPicture *arg1 = (io::humble::video::VideoPicture *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::VideoPicture **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getPts();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1setPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  io::humble::video::VideoPicture *arg1 = (io::humble::video::VideoPicture *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::VideoPicture **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setPts(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1getQuality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::VideoPicture *arg1 = (io::humble::video::VideoPicture *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::VideoPicture **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)(arg1)->getQuality();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1setQuality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  io::humble::video::VideoPicture *arg1 = (io::humble::video::VideoPicture *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::VideoPicture **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setQuality(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1getDataLineSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  io::humble::video::VideoPicture *arg1 = (io::humble::video::VideoPicture *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::VideoPicture **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)(arg1)->getDataLineSize(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1setComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6) {
  io::humble::video::VideoPicture *arg1 = (io::humble::video::VideoPicture *) 0 ;
  bool arg2 ;
  io::humble::video::PixelFormat::Type arg3 ;
  int arg4 ;
  int arg5 ;
  int64_t arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::VideoPicture **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (io::humble::video::PixelFormat::Type)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int64_t)jarg6; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setComplete(arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  io::humble::video::VideoPicture *arg1 = (io::humble::video::VideoPicture *) 0 ;
  io::humble::video::VideoPicture *arg2 = (io::humble::video::VideoPicture *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(io::humble::video::VideoPicture **)&jarg1; 
  arg2 = *(io::humble::video::VideoPicture **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->copy(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1make_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  io::humble::video::PixelFormat::Type arg1 ;
  int arg2 ;
  int arg3 ;
  io::humble::video::VideoPicture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::video::PixelFormat::Type)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::VideoPicture *)io::humble::video::VideoPicture::make(arg1,arg2,arg3);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::VideoPicture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1make_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::VideoPicture *arg1 = (io::humble::video::VideoPicture *) 0 ;
  io::humble::video::VideoPicture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::VideoPicture **)&jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::VideoPicture *)io::humble::video::VideoPicture::make(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::VideoPicture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1PICTURE_1TYPE_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::VideoPicture::PictType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::VideoPicture::PictType)io::humble::video::VideoPicture::PICTURE_TYPE_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1PICTURE_1TYPE_1I_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::VideoPicture::PictType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::VideoPicture::PictType)io::humble::video::VideoPicture::PICTURE_TYPE_I;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1PICTURE_1TYPE_1P_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::VideoPicture::PictType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::VideoPicture::PictType)io::humble::video::VideoPicture::PICTURE_TYPE_P;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1PICTURE_1TYPE_1B_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::VideoPicture::PictType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::VideoPicture::PictType)io::humble::video::VideoPicture::PICTURE_TYPE_B;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1PICTURE_1TYPE_1S_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::VideoPicture::PictType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::VideoPicture::PictType)io::humble::video::VideoPicture::PICTURE_TYPE_S;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1PICTURE_1TYPE_1SI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::VideoPicture::PictType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::VideoPicture::PictType)io::humble::video::VideoPicture::PICTURE_TYPE_SI;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1PICTURE_1TYPE_1SP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::VideoPicture::PictType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::VideoPicture::PictType)io::humble::video::VideoPicture::PICTURE_TYPE_SP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1PICTURE_1TYPE_1BI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::VideoPicture::PictType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::VideoPicture::PictType)io::humble::video::VideoPicture::PICTURE_TYPE_BI;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1getPictureType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::VideoPicture *arg1 = (io::humble::video::VideoPicture *) 0 ;
  io::humble::video::VideoPicture::PictType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::VideoPicture **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::VideoPicture::PictType)(arg1)->getPictureType();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1setPictureType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  io::humble::video::VideoPicture *arg1 = (io::humble::video::VideoPicture *) 0 ;
  io::humble::video::VideoPicture::PictType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::VideoPicture **)&jarg1; 
  arg2 = (io::humble::video::VideoPicture::PictType)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setPictureType(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_VideoPicture_1make_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  io::humble::ferry::IBuffer *arg1 = (io::humble::ferry::IBuffer *) 0 ;
  io::humble::video::PixelFormat::Type arg2 ;
  int arg3 ;
  int arg4 ;
  io::humble::video::VideoPicture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::IBuffer **)&jarg1; 
  arg2 = (io::humble::video::PixelFormat::Type)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::VideoPicture *)io::humble::video::VideoPicture::make(arg1,arg2,arg3,arg4);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::VideoPicture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Error_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Error *arg1 = (io::humble::video::Error *) 0 ;
  io::humble::video::Error::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Error **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Error::Type)(arg1)->getType();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_Error_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::Error *arg1 = (io::humble::video::Error *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Error **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getDescription();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Error_1getErrorNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Error *arg1 = (io::humble::video::Error *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Error **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getErrorNumber();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Error_1make_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int32_t arg1 ;
  io::humble::video::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Error *)io::humble::video::Error::make(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Error_1make_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  io::humble::video::Error::Type arg1 ;
  io::humble::video::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::video::Error::Type)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Error *)io::humble::video::Error::make(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Error_1errorNumberToType(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int32_t arg1 ;
  io::humble::video::Error::Type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Error::Type)io::humble::video::Error::errorNumberToType(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Error_1typeToErrorNumber(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  io::humble::video::Error::Type arg1 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::video::Error::Type)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)io::humble::video::Error::typeToErrorNumber(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Packet_1make_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  io::humble::video::Packet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Packet *)io::humble::video::Packet::make();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Packet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Packet_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  io::humble::ferry::IBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::ferry::IBuffer *)(arg1)->getData();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::ferry::IBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Packet_1make_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::ferry::IBuffer *arg1 = (io::humble::ferry::IBuffer *) 0 ;
  io::humble::video::Packet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::IBuffer **)&jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Packet *)io::humble::video::Packet::make(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Packet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Packet_1make_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  bool arg2 ;
  io::humble::video::Packet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Packet *)io::humble::video::Packet::make(arg1,arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Packet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Packet_1make_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int32_t arg1 ;
  io::humble::video::Packet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Packet *)io::humble::video::Packet::make(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Packet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Packet_1getPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getPts();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_Packet_1setPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setPts(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Packet_1getDts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getDts();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_Packet_1setDts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setDts(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Packet_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getSize();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Packet_1getMaxSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getMaxSize();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Packet_1getStreamIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getStreamIndex();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Packet_1getFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getFlags();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_Packet_1isKeyPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isKeyPacket();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Packet_1getDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getDuration();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Packet_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getPosition();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_Packet_1setKeyPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setKeyPacket(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_Packet_1setFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setFlags(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_Packet_1setStreamIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setStreamIndex(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_Packet_1setDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setDuration(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_Packet_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setPosition(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Packet_1getConvergenceDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getConvergenceDuration();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_Packet_1setConvergenceDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setConvergenceDuration(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Packet_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  io::humble::video::Packet *arg1 = (io::humble::video::Packet *) 0 ;
  int32_t arg2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Packet **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->reset(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Configurable_1getNumProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Configurable *arg1 = (io::humble::video::Configurable *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Configurable **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getNumProperties();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Configurable_1getPropertyMetaData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  io::humble::video::Configurable *arg1 = (io::humble::video::Configurable *) 0 ;
  int32_t arg2 ;
  io::humble::video::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Configurable **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Property *)(arg1)->getPropertyMetaData(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Configurable_1getPropertyMetaData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  io::humble::video::Configurable *arg1 = (io::humble::video::Configurable *) 0 ;
  char *arg2 = (char *) 0 ;
  io::humble::video::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Configurable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Property *)(arg1)->getPropertyMetaData((char const *)arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Property **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Configurable_1setProperty_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  io::humble::video::Configurable *arg1 = (io::humble::video::Configurable *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Configurable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->setProperty((char const *)arg2,(char const *)arg3);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Configurable_1setProperty_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  io::humble::video::Configurable *arg1 = (io::humble::video::Configurable *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Configurable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->setProperty((char const *)arg2,arg3);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Configurable_1setProperty_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  io::humble::video::Configurable *arg1 = (io::humble::video::Configurable *) 0 ;
  char *arg2 = (char *) 0 ;
  int64_t arg3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Configurable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int64_t)jarg3; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->setProperty((char const *)arg2,arg3);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Configurable_1setProperty_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  io::humble::video::Configurable *arg1 = (io::humble::video::Configurable *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Configurable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->setProperty((char const *)arg2,arg3);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Configurable_1setProperty_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  io::humble::video::Configurable *arg1 = (io::humble::video::Configurable *) 0 ;
  char *arg2 = (char *) 0 ;
  io::humble::video::Rational *arg3 = (io::humble::video::Rational *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(io::humble::video::Configurable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(io::humble::video::Rational **)&jarg3; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->setProperty((char const *)arg2,arg3);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_Configurable_1getPropertyAsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  io::humble::video::Configurable *arg1 = (io::humble::video::Configurable *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Configurable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getPropertyAsString((char const *)arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  free(result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_io_humble_video_VideoJNI_Configurable_1getPropertyAsDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  io::humble::video::Configurable *arg1 = (io::humble::video::Configurable *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Configurable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (double)(arg1)->getPropertyAsDouble((char const *)arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Configurable_1getPropertyAsLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  io::humble::video::Configurable *arg1 = (io::humble::video::Configurable *) 0 ;
  char *arg2 = (char *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Configurable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getPropertyAsLong((char const *)arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Configurable_1getPropertyAsRational(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  io::humble::video::Configurable *arg1 = (io::humble::video::Configurable *) 0 ;
  char *arg2 = (char *) 0 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Configurable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)(arg1)->getPropertyAsRational((char const *)arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_Configurable_1getPropertyAsBoolean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  io::humble::video::Configurable *arg1 = (io::humble::video::Configurable *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Configurable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->getPropertyAsBoolean((char const *)arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Configurable_1setProperty_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  io::humble::video::Configurable *arg1 = (io::humble::video::Configurable *) 0 ;
  io::humble::video::KeyValueBag *arg2 = (io::humble::video::KeyValueBag *) 0 ;
  io::humble::video::KeyValueBag *arg3 = (io::humble::video::KeyValueBag *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(io::humble::video::Configurable **)&jarg1; 
  arg2 = *(io::humble::video::KeyValueBag **)&jarg2; 
  arg3 = *(io::humble::video::KeyValueBag **)&jarg3; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->setProperty(arg2,arg3);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_MediaDescriptor_1MEDIA_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::MediaDescriptor::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::MediaDescriptor::Type)io::humble::video::MediaDescriptor::MEDIA_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_MediaDescriptor_1MEDIA_1VIDEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::MediaDescriptor::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::MediaDescriptor::Type)io::humble::video::MediaDescriptor::MEDIA_VIDEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_MediaDescriptor_1MEDIA_1AUDIO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::MediaDescriptor::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::MediaDescriptor::Type)io::humble::video::MediaDescriptor::MEDIA_AUDIO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_MediaDescriptor_1MEDIA_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::MediaDescriptor::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::MediaDescriptor::Type)io::humble::video::MediaDescriptor::MEDIA_DATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_MediaDescriptor_1MEDIA_1SUBTITLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::MediaDescriptor::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::MediaDescriptor::Type)io::humble::video::MediaDescriptor::MEDIA_SUBTITLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_MediaDescriptor_1MEDIA_1ATTACHMENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::MediaDescriptor::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::MediaDescriptor::Type)io::humble::video::MediaDescriptor::MEDIA_ATTACHMENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1RESERVED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_RESERVED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1AAC_1MAIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_AAC_MAIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1AAC_1LOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_AAC_LOW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1AAC_1SSR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_AAC_SSR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1AAC_1LTP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_AAC_LTP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1AAC_1HE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_AAC_HE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1AAC_1HE_1V2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_AAC_HE_V2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1AAC_1LD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_AAC_LD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1AAC_1ELD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_AAC_ELD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1DTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_DTS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1DTS_1ES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_DTS_ES;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1DTS_196_124_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_DTS_96_24;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1DTS_1HD_1HRA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_DTS_HD_HRA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1DTS_1HD_1MA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_DTS_HD_MA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG2_1422_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG2_422;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG2_1HIGH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG2_HIGH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG2_1SS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG2_SS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG2_1SNR_1SCALABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG2_SNR_SCALABLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG2_1MAIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG2_MAIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG2_1SIMPLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG2_SIMPLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1H264_1CONSTRAINED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_H264_CONSTRAINED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1H264_1INTRA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_H264_INTRA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1H264_1BASELINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_H264_BASELINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1H264_1CONSTRAINED_1BASELINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_H264_CONSTRAINED_BASELINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1H264_1MAIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_H264_MAIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1H264_1EXTENDED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_H264_EXTENDED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1H264_1HIGH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_H264_HIGH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1H264_1HIGH_110_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_H264_HIGH_10;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1H264_1HIGH_110_1INTRA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_H264_HIGH_10_INTRA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1H264_1HIGH_1422_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_H264_HIGH_422;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1H264_1HIGH_1422_1INTRA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_H264_HIGH_422_INTRA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1H264_1HIGH_1444_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_H264_HIGH_444;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1H264_1HIGH_1444_1PREDICTIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_H264_HIGH_444_PREDICTIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1H264_1HIGH_1444_1INTRA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_H264_HIGH_444_INTRA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1H264_1CAVLC_1444_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_H264_CAVLC_444;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1VC1_1SIMPLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_VC1_SIMPLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1VC1_1MAIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_VC1_MAIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1VC1_1COMPLEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_VC1_COMPLEX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1VC1_1ADVANCED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_VC1_ADVANCED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG4_1SIMPLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG4_SIMPLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG4_1SIMPLE_1SCALABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG4_SIMPLE_SCALABLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG4_1CORE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG4_CORE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG4_1MAIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG4_MAIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG4_1N_1BIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG4_N_BIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG4_1SCALABLE_1TEXTURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG4_SCALABLE_TEXTURE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG4_1SIMPLE_1FACE_1ANIMATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG4_SIMPLE_FACE_ANIMATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG4_1BASIC_1ANIMATED_1TEXTURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG4_BASIC_ANIMATED_TEXTURE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG4_1HYBRID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG4_HYBRID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG4_1ADVANCED_1REAL_1TIME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG4_ADVANCED_REAL_TIME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG4_1CORE_1SCALABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG4_CORE_SCALABLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG4_1ADVANCED_1CODING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG4_ADVANCED_CODING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG4_1ADVANCED_1CORE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG4_ADVANCED_CORE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG4_1ADVANCED_1SCALABLE_1TEXTURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG4_ADVANCED_SCALABLE_TEXTURE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG4_1SIMPLE_1STUDIO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG4_SIMPLE_STUDIO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1PROFILE_1MPEG4_1ADVANCED_1SIMPLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecProfile::ProfileType)io::humble::video::CodecProfile::PROFILE_MPEG4_ADVANCED_SIMPLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1getProfile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::CodecProfile *arg1 = (io::humble::video::CodecProfile *) 0 ;
  io::humble::video::CodecProfile::ProfileType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::CodecProfile **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::CodecProfile::ProfileType)(arg1)->getProfile();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_CodecProfile_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::CodecProfile *arg1 = (io::humble::video::CodecProfile *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::CodecProfile **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getName();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1DISCARD_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::DiscardFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::DiscardFlag)io::humble::video::Codec::DISCARD_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1DISCARD_1DEFAULT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::DiscardFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::DiscardFlag)io::humble::video::Codec::DISCARD_DEFAULT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1DISCARD_1NONREF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::DiscardFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::DiscardFlag)io::humble::video::Codec::DISCARD_NONREF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1DISCARD_1BIDIR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::DiscardFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::DiscardFlag)io::humble::video::Codec::DISCARD_BIDIR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1DISCARD_1NONKEY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::DiscardFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::DiscardFlag)io::humble::video::Codec::DISCARD_NONKEY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1DISCARD_1ALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::DiscardFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::DiscardFlag)io::humble::video::Codec::DISCARD_ALL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MPEG1VIDEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MPEG1VIDEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MPEG2VIDEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MPEG2VIDEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MPEG2VIDEO_1XVMC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MPEG2VIDEO_XVMC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1H261_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_H261;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1H263_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_H263;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1RV10_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_RV10;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1RV20_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_RV20;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MJPEG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MJPEG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MJPEGB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MJPEGB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1LJPEG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_LJPEG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SP5X_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SP5X;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1JPEGLS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_JPEGLS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MPEG4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MPEG4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1RAWVIDEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_RAWVIDEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MSMPEG4V1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MSMPEG4V1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MSMPEG4V2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MSMPEG4V2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MSMPEG4V3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MSMPEG4V3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1WMV1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_WMV1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1WMV2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_WMV2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1H263P_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_H263P;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1H263I_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_H263I;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1FLV1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_FLV1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SVQ1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SVQ1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SVQ3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SVQ3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1DVVIDEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_DVVIDEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1HUFFYUV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_HUFFYUV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1CYUV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_CYUV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1H264_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_H264;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1INDEO3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_INDEO3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VP3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VP3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1THEORA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_THEORA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ASV1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ASV1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ASV2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ASV2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1FFV1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_FFV1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_14XM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_4XM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VCR1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VCR1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1CLJR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_CLJR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MDEC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MDEC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ROQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ROQ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1INTERPLAY_1VIDEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_INTERPLAY_VIDEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1XAN_1WC3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_XAN_WC3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1XAN_1WC4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_XAN_WC4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1RPZA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_RPZA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1CINEPAK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_CINEPAK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1WS_1VQA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_WS_VQA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MSRLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MSRLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MSVIDEO1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MSVIDEO1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1IDCIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_IDCIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_18BPS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_8BPS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SMC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SMC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1FLIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_FLIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TRUEMOTION1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TRUEMOTION1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VMDVIDEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VMDVIDEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MSZH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MSZH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ZLIB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ZLIB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1QTRLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_QTRLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TSCC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TSCC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ULTI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ULTI;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1QDRAW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_QDRAW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VIXL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VIXL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1QPEG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_QPEG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PNG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PNG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PPM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PPM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PBM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PBM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PGM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PGM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PGMYUV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PGMYUV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PAM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1FFVHUFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_FFVHUFF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1RV30_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_RV30;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1RV40_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_RV40;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VC1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VC1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1WMV3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_WMV3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1LOCO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_LOCO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1WNV1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_WNV1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1AASC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_AASC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1INDEO2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_INDEO2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1FRAPS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_FRAPS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TRUEMOTION2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TRUEMOTION2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1BMP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_BMP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1CSCD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_CSCD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MMVIDEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MMVIDEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ZMBV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ZMBV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1AVS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_AVS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SMACKVIDEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SMACKVIDEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1NUV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_NUV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1KMVC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_KMVC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1FLASHSV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_FLASHSV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1CAVS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_CAVS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1JPEG2000_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_JPEG2000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VMNC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VMNC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VP5_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VP5;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VP6_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VP6;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VP6F_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VP6F;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TARGA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TARGA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1DSICINVIDEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_DSICINVIDEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TIERTEXSEQVIDEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TIERTEXSEQVIDEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TIFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TIFF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1GIF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_GIF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1DXA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_DXA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1DNXHD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_DNXHD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1THP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_THP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SGI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SGI;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1C93_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_C93;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1BETHSOFTVID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_BETHSOFTVID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PTX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PTX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TXD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TXD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VP6A_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VP6A;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1AMV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_AMV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SUNRAST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SUNRAST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1INDEO4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_INDEO4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1INDEO5_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_INDEO5;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MIMIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MIMIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1RL2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_RL2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ESCAPE124_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ESCAPE124;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1DIRAC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_DIRAC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1BFI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_BFI;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1CMV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_CMV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MOTIONPIXELS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MOTIONPIXELS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TGV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TGV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TGQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TGQ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TQI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TQI;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1AURA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_AURA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1AURA2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_AURA2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1V210X_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_V210X;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TMV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TMV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1V210_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_V210;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1DPX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_DPX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1FRWU_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_FRWU;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1FLASHSV2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_FLASHSV2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1CDGRAPHICS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_CDGRAPHICS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1R210_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_R210;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ANM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ANM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1BINKVIDEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_BINKVIDEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1IFF_1ILBM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_IFF_ILBM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1IFF_1BYTERUN1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_IFF_BYTERUN1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1KGV1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_KGV1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1YOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_YOP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VP8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VP8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PICTOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PICTOR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ANSI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ANSI;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1A64_1MULTI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_A64_MULTI;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1A64_1MULTI5_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_A64_MULTI5;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1R10K_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_R10K;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MXPEG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MXPEG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1LAGARITH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_LAGARITH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PRORES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PRORES;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1JV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_JV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1DFA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_DFA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1WMV3IMAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_WMV3IMAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VC1IMAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VC1IMAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1UTVIDEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_UTVIDEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1BMV_1VIDEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_BMV_VIDEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VBLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VBLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1DXTORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_DXTORY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1V410_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_V410;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1XWD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_XWD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1CDXL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_CDXL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1XBM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_XBM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ZEROCODEC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ZEROCODEC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MSS1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MSS1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MSA1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MSA1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TSCC2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TSCC2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MTS2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MTS2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1CLLC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_CLLC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MSS2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MSS2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VP9_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VP9;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1AIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_AIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ESCAPE130_1DEPRECATED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ESCAPE130_DEPRECATED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1G2M_1DEPRECATED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_G2M_DEPRECATED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1AV_1CODEC_1ID_1BRENDER_1PIX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::AV_CODEC_ID_BRENDER_PIX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1Y41P_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_Y41P;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ESCAPE130_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ESCAPE130;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1EXR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_EXR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1AVRP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_AVRP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1012V_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_012V;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1G2M_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_G2M;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1AVUI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_AVUI;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1AYUV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_AYUV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TARGA_1Y216_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TARGA_Y216;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1V308_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_V308;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1V408_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_V408;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1YUV4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_YUV4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SANM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SANM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PAF_1VIDEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PAF_VIDEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1AVRN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_AVRN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1CPIA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_CPIA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1XFACE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_XFACE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SGIRLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SGIRLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MVC1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MVC1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MVC2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MVC2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SNOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SNOW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1WEBP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_WEBP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SMVJPEG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SMVJPEG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1FIRST_1AUDIO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_FIRST_AUDIO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1S16LE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_S16LE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1S16BE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_S16BE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1U16LE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_U16LE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1U16BE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_U16BE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1S8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_S8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1U8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_U8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1MULAW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_MULAW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1ALAW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_ALAW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1S32LE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_S32LE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1S32BE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_S32BE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1U32LE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_U32LE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1U32BE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_U32BE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1S24LE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_S24LE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1S24BE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_S24BE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1U24LE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_U24LE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1U24BE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_U24BE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1S24DAUD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_S24DAUD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1ZORK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_ZORK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1S16LE_1PLANAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_S16LE_PLANAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1DVD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_DVD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1F32BE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_F32BE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1F32LE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_F32LE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1F64BE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_F64BE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1F64LE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_F64LE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1BLURAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_BLURAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1LXF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_LXF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1S302M_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_S302M;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1S8_1PLANAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_S8_PLANAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1S24LE_1PLANAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_S24LE_PLANAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1S32LE_1PLANAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_S32LE_PLANAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PCM_1S16BE_1PLANAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PCM_S16BE_PLANAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1IMA_1QT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_IMA_QT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1IMA_1WAV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_IMA_WAV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1IMA_1DK3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_IMA_DK3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1IMA_1DK4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_IMA_DK4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1IMA_1WS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_IMA_WS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1IMA_1SMJPEG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_IMA_SMJPEG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1MS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_MS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_14XM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_4XM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1XA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_XA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1ADX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_ADX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1EA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_EA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1G726_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_G726;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1CT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_CT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1SWF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_SWF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1YAMAHA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_YAMAHA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1SBPRO_14_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_SBPRO_4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1SBPRO_13_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_SBPRO_3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1SBPRO_12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_SBPRO_2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1THP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_THP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1IMA_1AMV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_IMA_AMV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1EA_1R1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_EA_R1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1EA_1R3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_EA_R3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1EA_1R2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_EA_R2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1IMA_1EA_1SEAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_IMA_EA_SEAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1IMA_1EA_1EACS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_IMA_EA_EACS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1EA_1XAS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_EA_XAS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1EA_1MAXIS_1XA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_EA_MAXIS_XA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1IMA_1ISS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_IMA_ISS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1G722_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_G722;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1IMA_1APC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_IMA_APC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VIMA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VIMA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1AFC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_AFC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1IMA_1OKI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_IMA_OKI;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1DTK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_DTK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ADPCM_1IMA_1RAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ADPCM_IMA_RAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1AMR_1NB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_AMR_NB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1AMR_1WB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_AMR_WB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1RA_1144_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_RA_144;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1RA_1288_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_RA_288;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ROQ_1DPCM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ROQ_DPCM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1INTERPLAY_1DPCM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_INTERPLAY_DPCM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1XAN_1DPCM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_XAN_DPCM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SOL_1DPCM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SOL_DPCM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MP2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MP2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MP3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MP3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1AAC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_AAC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1AC3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_AC3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1DTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_DTS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VORBIS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VORBIS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1DVAUDIO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_DVAUDIO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1WMAV1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_WMAV1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1WMAV2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_WMAV2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MACE3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MACE3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MACE6_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MACE6;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VMDAUDIO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VMDAUDIO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1FLAC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_FLAC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MP3ADU_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MP3ADU;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MP3ON4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MP3ON4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SHORTEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SHORTEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ALAC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ALAC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1WESTWOOD_1SND1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_WESTWOOD_SND1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1GSM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_GSM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1QDM2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_QDM2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1COOK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_COOK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TRUESPEECH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TRUESPEECH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TTA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TTA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SMACKAUDIO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SMACKAUDIO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1QCELP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_QCELP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1WAVPACK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_WAVPACK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1DSICINAUDIO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_DSICINAUDIO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1IMC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_IMC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MUSEPACK7_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MUSEPACK7;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MLP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MLP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1GSM_1MS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_GSM_MS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ATRAC3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ATRAC3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VOXWARE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VOXWARE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1APE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_APE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1NELLYMOSER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_NELLYMOSER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MUSEPACK8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MUSEPACK8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SPEEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SPEEX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1WMAVOICE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_WMAVOICE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1WMAPRO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_WMAPRO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1WMALOSSLESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_WMALOSSLESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ATRAC3P_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ATRAC3P;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1EAC3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_EAC3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SIPR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SIPR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MP1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MP1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TWINVQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TWINVQ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TRUEHD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TRUEHD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MP4ALS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MP4ALS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ATRAC1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ATRAC1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1BINKAUDIO_1RDFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_BINKAUDIO_RDFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1BINKAUDIO_1DCT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_BINKAUDIO_DCT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1AAC_1LATM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_AAC_LATM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1QDMC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_QDMC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1CELT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_CELT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1G723_11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_G723_1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1G729_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_G729;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_18SVX_1EXP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_8SVX_EXP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_18SVX_1FIB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_8SVX_FIB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1BMV_1AUDIO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_BMV_AUDIO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1RALF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_RALF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1IAC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_IAC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ILBC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ILBC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1OPUS_1DEPRECATED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_OPUS_DEPRECATED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1COMFORT_1NOISE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_COMFORT_NOISE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TAK_1DEPRECATED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TAK_DEPRECATED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1FFWAVESYNTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_FFWAVESYNTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SONIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SONIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SONIC_1LS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SONIC_LS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PAF_1AUDIO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PAF_AUDIO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1OPUS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_OPUS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TAK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TAK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1EVRC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_EVRC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SMV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SMV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1FIRST_1SUBTITLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_FIRST_SUBTITLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1DVD_1SUBTITLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_DVD_SUBTITLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1DVB_1SUBTITLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_DVB_SUBTITLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TEXT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TEXT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1XSUB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_XSUB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SSA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SSA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MOV_1TEXT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MOV_TEXT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1HDMV_1PGS_1SUBTITLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_HDMV_PGS_SUBTITLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1DVB_1TELETEXT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_DVB_TELETEXT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SRT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SRT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MICRODVD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MICRODVD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1EIA_1608_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_EIA_608;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1JACOSUB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_JACOSUB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SAMI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SAMI;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1REALTEXT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_REALTEXT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SUBVIEWER1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SUBVIEWER1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SUBVIEWER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SUBVIEWER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SUBRIP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SUBRIP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1WEBVTT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_WEBVTT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MPL2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MPL2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1VPLAYER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_VPLAYER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PJS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PJS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1ASS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_ASS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1FIRST_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_FIRST_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1TTF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_TTF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1BINTEXT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_BINTEXT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1XBIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_XBIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1IDF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_IDF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1OTF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_OTF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1SMPTE_1KLV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_SMPTE_KLV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1DVD_1NAV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_DVD_NAV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1PROBE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_PROBE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MPEG2TS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MPEG2TS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1MPEG4SYSTEMS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_MPEG4SYSTEMS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CODEC_1ID_1FFMETADATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::ID)io::humble::video::Codec::CODEC_ID_FFMETADATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CAP_1DRAW_1HORIZ_1BAND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::CodecCapability result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::CodecCapability)io::humble::video::Codec::CAP_DRAW_HORIZ_BAND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CAP_1DR1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::CodecCapability result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::CodecCapability)io::humble::video::Codec::CAP_DR1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CAP_1TRUNCATED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::CodecCapability result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::CodecCapability)io::humble::video::Codec::CAP_TRUNCATED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CAP_1HWACCEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::CodecCapability result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::CodecCapability)io::humble::video::Codec::CAP_HWACCEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CAP_1DELAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::CodecCapability result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::CodecCapability)io::humble::video::Codec::CAP_DELAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CAP_1SMALL_1LAST_1FRAME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::CodecCapability result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::CodecCapability)io::humble::video::Codec::CAP_SMALL_LAST_FRAME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CAP_1HWACCEL_1VDPAU_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::CodecCapability result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::CodecCapability)io::humble::video::Codec::CAP_HWACCEL_VDPAU;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CAP_1SUBFRAMES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::CodecCapability result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::CodecCapability)io::humble::video::Codec::CAP_SUBFRAMES;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CAP_1EXPERIMENTAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::CodecCapability result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::CodecCapability)io::humble::video::Codec::CAP_EXPERIMENTAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CAP_1CHANNEL_1CONF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::CodecCapability result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::CodecCapability)io::humble::video::Codec::CAP_CHANNEL_CONF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CAP_1NEG_1LINESIZES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::CodecCapability result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::CodecCapability)io::humble::video::Codec::CAP_NEG_LINESIZES;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CAP_1FRAME_1THREADS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::CodecCapability result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::CodecCapability)io::humble::video::Codec::CAP_FRAME_THREADS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CAP_1SLICE_1THREADS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::CodecCapability result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::CodecCapability)io::humble::video::Codec::CAP_SLICE_THREADS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CAP_1PARAM_1CHANGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::CodecCapability result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::CodecCapability)io::humble::video::Codec::CAP_PARAM_CHANGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CAP_1AUTO_1THREADS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::CodecCapability result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::CodecCapability)io::humble::video::Codec::CAP_AUTO_THREADS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CAP_1VARIABLE_1FRAME_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::CodecCapability result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::CodecCapability)io::humble::video::Codec::CAP_VARIABLE_FRAME_SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CAP_1INTRA_1ONLY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::CodecCapability result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::CodecCapability)io::humble::video::Codec::CAP_INTRA_ONLY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1CAP_1LOSSLESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Codec::CodecCapability result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Codec::CodecCapability)io::humble::video::Codec::CAP_LOSSLESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_Codec_1hasCapability(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  io::humble::video::Codec::CodecCapability arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  arg2 = (io::humble::video::Codec::CodecCapability)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->hasCapability(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1getCapabilities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getCapabilities();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_Codec_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getName();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1getIDAsInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)(arg1)->getIDAsInt();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Codec::ID)(arg1)->getID();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  io::humble::video::MediaDescriptor::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::MediaDescriptor::Type)(arg1)->getType();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_Codec_1canDecode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->canDecode();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_Codec_1canEncode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->canEncode();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Codec_1findEncodingCodec(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  io::humble::video::Codec::ID arg1 ;
  io::humble::video::Codec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::video::Codec::ID)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Codec *)io::humble::video::Codec::findEncodingCodec(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Codec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Codec_1findEncodingCodecByIntID(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  io::humble::video::Codec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Codec *)io::humble::video::Codec::findEncodingCodecByIntID(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Codec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Codec_1findEncodingCodecByName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  io::humble::video::Codec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Codec *)io::humble::video::Codec::findEncodingCodecByName((char const *)arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Codec **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Codec_1findDecodingCodec(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  io::humble::video::Codec::ID arg1 ;
  io::humble::video::Codec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::video::Codec::ID)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Codec *)io::humble::video::Codec::findDecodingCodec(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Codec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Codec_1findDecodingCodecByIntID(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  io::humble::video::Codec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Codec *)io::humble::video::Codec::findDecodingCodecByIntID(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Codec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Codec_1findDecodingCodecByName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  io::humble::video::Codec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Codec *)io::humble::video::Codec::findDecodingCodecByName((char const *)arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Codec **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Codec_1guessEncodingCodec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  jlong jresult = 0 ;
  io::humble::video::SinkFormat *arg1 = (io::humble::video::SinkFormat *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  io::humble::video::MediaDescriptor::Type arg5 ;
  io::humble::video::Codec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SinkFormat **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (io::humble::video::MediaDescriptor::Type)jarg5; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Codec *)io::humble::video::Codec::guessEncodingCodec(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Codec **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_Codec_1getLongName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getLongName();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1getNumInstalledCodecs(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)io::humble::video::Codec::getNumInstalledCodecs();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Codec_1getInstalledCodec(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int32_t arg1 ;
  io::humble::video::Codec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Codec *)io::humble::video::Codec::getInstalledCodec(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Codec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1getNumSupportedVideoFrameRates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getNumSupportedVideoFrameRates();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Codec_1getSupportedVideoFrameRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  int32_t arg2 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)(arg1)->getSupportedVideoFrameRate(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1getNumSupportedVideoPixelFormats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getNumSupportedVideoPixelFormats();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1getSupportedVideoPixelFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  int32_t arg2 ;
  io::humble::video::PixelFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::PixelFormat::Type)(arg1)->getSupportedVideoPixelFormat(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1getNumSupportedAudioSampleRates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getNumSupportedAudioSampleRates();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1getSupportedAudioSampleRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  int32_t arg2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getSupportedAudioSampleRate(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1getNumSupportedAudioSampleFormats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getNumSupportedAudioSampleFormats();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1getSupportedAudioSampleFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  int32_t arg2 ;
  io::humble::video::AudioSamples::Format result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::AudioSamples::Format)(arg1)->getSupportedAudioSampleFormat(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1getNumSupportedAudioChannelLayouts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getNumSupportedAudioChannelLayouts();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Codec_1getSupportedAudioChannelLayout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  int32_t arg2 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getSupportedAudioChannelLayout(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Codec_1getNumSupportedProfiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getNumSupportedProfiles();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Codec_1getSupportedProfile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  io::humble::video::Codec *arg1 = (io::humble::video::Codec *) 0 ;
  int32_t arg2 ;
  io::humble::video::CodecProfile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Codec **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::CodecProfile *)(arg1)->getSupportedProfile(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::CodecProfile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecDescriptor_1PROP_1INTRA_1ONLY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecDescriptor::CodecProperty result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecDescriptor::CodecProperty)io::humble::video::CodecDescriptor::PROP_INTRA_ONLY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecDescriptor_1PROP_1LOSSY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecDescriptor::CodecProperty result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecDescriptor::CodecProperty)io::humble::video::CodecDescriptor::PROP_LOSSY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecDescriptor_1PROP_1LOSSLESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecDescriptor::CodecProperty result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecDescriptor::CodecProperty)io::humble::video::CodecDescriptor::PROP_LOSSLESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecDescriptor_1PROP_1BITMAP_1SUB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::CodecDescriptor::CodecProperty result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::CodecDescriptor::CodecProperty)io::humble::video::CodecDescriptor::PROP_BITMAP_SUB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_CodecDescriptor_1hasProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  io::humble::video::CodecDescriptor *arg1 = (io::humble::video::CodecDescriptor *) 0 ;
  io::humble::video::CodecDescriptor::CodecProperty arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::CodecDescriptor **)&jarg1; 
  arg2 = (io::humble::video::CodecDescriptor::CodecProperty)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->hasProperty(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_CodecDescriptor_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::CodecDescriptor *arg1 = (io::humble::video::CodecDescriptor *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::CodecDescriptor **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getName();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_CodecDescriptor_1getLongName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::CodecDescriptor *arg1 = (io::humble::video::CodecDescriptor *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::CodecDescriptor **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getLongName();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecDescriptor_1getProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::CodecDescriptor *arg1 = (io::humble::video::CodecDescriptor *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::CodecDescriptor **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getProperties();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecDescriptor_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::CodecDescriptor *arg1 = (io::humble::video::CodecDescriptor *) 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::CodecDescriptor **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Codec::ID)(arg1)->getId();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_CodecDescriptor_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::CodecDescriptor *arg1 = (io::humble::video::CodecDescriptor *) 0 ;
  io::humble::video::MediaDescriptor::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::CodecDescriptor **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::MediaDescriptor::Type)(arg1)->getType();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_CodecDescriptor_1make(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  io::humble::video::Codec::ID arg1 ;
  io::humble::video::CodecDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::video::Codec::ID)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::CodecDescriptor *)io::humble::video::CodecDescriptor::make(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::CodecDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1INVALID_1FLAG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerFormat::Flags)io::humble::video::ContainerFormat::INVALID_FLAG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1NO_1FILE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerFormat::Flags)io::humble::video::ContainerFormat::NO_FILE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1NEED_1NUMBER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerFormat::Flags)io::humble::video::ContainerFormat::NEED_NUMBER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1SHOW_1IDS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerFormat::Flags)io::humble::video::ContainerFormat::SHOW_IDS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1RAW_1PICTURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerFormat::Flags)io::humble::video::ContainerFormat::RAW_PICTURE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1GLOBAL_1HEADER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerFormat::Flags)io::humble::video::ContainerFormat::GLOBAL_HEADER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1NO_1TIMESTAMPS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerFormat::Flags)io::humble::video::ContainerFormat::NO_TIMESTAMPS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1GENERIC_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerFormat::Flags)io::humble::video::ContainerFormat::GENERIC_INDEX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1TIMESTAMP_1DISCONTINUITIES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerFormat::Flags)io::humble::video::ContainerFormat::TIMESTAMP_DISCONTINUITIES;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1VARIABLE_1FPS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerFormat::Flags)io::humble::video::ContainerFormat::VARIABLE_FPS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1NO_1DIMENSIONS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerFormat::Flags)io::humble::video::ContainerFormat::NO_DIMENSIONS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1NO_1STREAMS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerFormat::Flags)io::humble::video::ContainerFormat::NO_STREAMS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1NO_1BINARY_1SEARCH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerFormat::Flags)io::humble::video::ContainerFormat::NO_BINARY_SEARCH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1NO_1GENERIC_1SEARCH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerFormat::Flags)io::humble::video::ContainerFormat::NO_GENERIC_SEARCH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1NO_1BYTE_1SEEKING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerFormat::Flags)io::humble::video::ContainerFormat::NO_BYTE_SEEKING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1ALLOW_1FLUSH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerFormat::Flags)io::humble::video::ContainerFormat::ALLOW_FLUSH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1NONSTRICT_1TIMESTAMPS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerFormat::Flags)io::humble::video::ContainerFormat::NONSTRICT_TIMESTAMPS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1SEEK_1TO_1PTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerFormat::Flags)io::humble::video::ContainerFormat::SEEK_TO_PTS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::ContainerFormat *arg1 = (io::humble::video::ContainerFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getName();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1getLongName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::ContainerFormat *arg1 = (io::humble::video::ContainerFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getLongName();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1getExtensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::ContainerFormat *arg1 = (io::humble::video::ContainerFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getExtensions();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1getFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat *arg1 = (io::humble::video::ContainerFormat *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getFlags();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1getNumSupportedCodecs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat *arg1 = (io::humble::video::ContainerFormat *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getNumSupportedCodecs();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1getSupportedCodecId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  io::humble::video::ContainerFormat *arg1 = (io::humble::video::ContainerFormat *) 0 ;
  int32_t arg2 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerFormat **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Codec::ID)(arg1)->getSupportedCodecId(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_ContainerFormat_1getSupportedCodecTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  io::humble::video::ContainerFormat *arg1 = (io::humble::video::ContainerFormat *) 0 ;
  int32_t arg2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerFormat **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (uint32_t)(arg1)->getSupportedCodecTag(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_delete_1ContainerFormat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  io::humble::video::ContainerFormat *arg1 = (io::humble::video::ContainerFormat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(io::humble::video::ContainerFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      delete arg1;
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_SinkFormat_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::SinkFormat *arg1 = (io::humble::video::SinkFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SinkFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getName();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_SinkFormat_1getLongName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::SinkFormat *arg1 = (io::humble::video::SinkFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SinkFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getLongName();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_SinkFormat_1getExtensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::SinkFormat *arg1 = (io::humble::video::SinkFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SinkFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getExtensions();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_SinkFormat_1getFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::SinkFormat *arg1 = (io::humble::video::SinkFormat *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SinkFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getFlags();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_SinkFormat_1getDefaultAudioCodecId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::SinkFormat *arg1 = (io::humble::video::SinkFormat *) 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SinkFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Codec::ID)(arg1)->getDefaultAudioCodecId();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_SinkFormat_1getDefaultVideoCodecId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::SinkFormat *arg1 = (io::humble::video::SinkFormat *) 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SinkFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Codec::ID)(arg1)->getDefaultVideoCodecId();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_SinkFormat_1getDefaultSubtitleCodecId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::SinkFormat *arg1 = (io::humble::video::SinkFormat *) 0 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SinkFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Codec::ID)(arg1)->getDefaultSubtitleCodecId();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_SinkFormat_1getMimeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::SinkFormat *arg1 = (io::humble::video::SinkFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SinkFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getMimeType();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SinkFormat_1guessFormat(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  io::humble::video::SinkFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::SinkFormat *)io::humble::video::SinkFormat::guessFormat((char const *)arg1,(char const *)arg2,(char const *)arg3);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::SinkFormat **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_SinkFormat_1guessCodec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  jint jresult = 0 ;
  io::humble::video::SinkFormat *arg1 = (io::humble::video::SinkFormat *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  io::humble::video::MediaDescriptor::Type arg5 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SinkFormat **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (io::humble::video::MediaDescriptor::Type)jarg5; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Codec::ID)(arg1)->guessCodec((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_SinkFormat_1getNumSupportedCodecs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::SinkFormat *arg1 = (io::humble::video::SinkFormat *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SinkFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getNumSupportedCodecs();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_SinkFormat_1getSupportedCodecId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  io::humble::video::SinkFormat *arg1 = (io::humble::video::SinkFormat *) 0 ;
  int32_t arg2 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SinkFormat **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Codec::ID)(arg1)->getSupportedCodecId(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SinkFormat_1getSupportedCodecTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  io::humble::video::SinkFormat *arg1 = (io::humble::video::SinkFormat *) 0 ;
  int32_t arg2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SinkFormat **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (uint32_t)(arg1)->getSupportedCodecTag(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_SinkFormat_1getNumFormats(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)io::humble::video::SinkFormat::getNumFormats();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SinkFormat_1getFormat(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int32_t arg1 ;
  io::humble::video::SinkFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::SinkFormat *)io::humble::video::SinkFormat::getFormat(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::SinkFormat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_SourceFormat_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::SourceFormat *arg1 = (io::humble::video::SourceFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SourceFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getName();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_SourceFormat_1getLongName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::SourceFormat *arg1 = (io::humble::video::SourceFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SourceFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getLongName();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_SourceFormat_1getExtensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::SourceFormat *arg1 = (io::humble::video::SourceFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SourceFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getExtensions();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_SourceFormat_1getFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::SourceFormat *arg1 = (io::humble::video::SourceFormat *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SourceFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getFlags();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_SourceFormat_1getNumSupportedCodecs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::SourceFormat *arg1 = (io::humble::video::SourceFormat *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SourceFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getNumSupportedCodecs();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_SourceFormat_1getSupportedCodecId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  io::humble::video::SourceFormat *arg1 = (io::humble::video::SourceFormat *) 0 ;
  int32_t arg2 ;
  io::humble::video::Codec::ID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SourceFormat **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Codec::ID)(arg1)->getSupportedCodecId(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SourceFormat_1getSupportedCodecTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  io::humble::video::SourceFormat *arg1 = (io::humble::video::SourceFormat *) 0 ;
  int32_t arg2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SourceFormat **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (uint32_t)(arg1)->getSupportedCodecTag(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SourceFormat_1findFormat(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  io::humble::video::SourceFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::SourceFormat *)io::humble::video::SourceFormat::findFormat((char const *)arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::SourceFormat **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_SourceFormat_1getNumFormats(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)io::humble::video::SourceFormat::getNumFormats();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SourceFormat_1getFormat(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int32_t arg1 ;
  io::humble::video::SourceFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::SourceFormat *)io::humble::video::SourceFormat::getFormat(arg1);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::SourceFormat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_IndexEntry_1INDEX_1FLAG_1KEYFRAME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)io::humble::video::IndexEntry::INDEX_FLAG_KEYFRAME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_IndexEntry_1make(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int64_t arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  int32_t arg5 ;
  io::humble::video::IndexEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = (int32_t)jarg5; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::IndexEntry *)io::humble::video::IndexEntry::make(arg1,arg2,arg3,arg4,arg5);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::IndexEntry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_IndexEntry_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::IndexEntry *arg1 = (io::humble::video::IndexEntry *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::IndexEntry **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getPosition();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_IndexEntry_1getTimeStamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::IndexEntry *arg1 = (io::humble::video::IndexEntry *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::IndexEntry **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getTimeStamp();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_IndexEntry_1getFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::IndexEntry *arg1 = (io::humble::video::IndexEntry *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::IndexEntry **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getFlags();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_IndexEntry_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::IndexEntry *arg1 = (io::humble::video::IndexEntry *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::IndexEntry **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getSize();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_IndexEntry_1getMinDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::IndexEntry *arg1 = (io::humble::video::IndexEntry *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::IndexEntry **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getMinDistance();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_IndexEntry_1isKeyFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  io::humble::video::IndexEntry *arg1 = (io::humble::video::IndexEntry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::IndexEntry **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isKeyFrame();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1DISPOSITION_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream::Disposition result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerStream::Disposition)io::humble::video::ContainerStream::DISPOSITION_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1DISPOSITION_1DEFAULT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream::Disposition result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerStream::Disposition)io::humble::video::ContainerStream::DISPOSITION_DEFAULT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1DISPOSITION_1DUB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream::Disposition result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerStream::Disposition)io::humble::video::ContainerStream::DISPOSITION_DUB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1DISPOSITION_1ORIGINAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream::Disposition result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerStream::Disposition)io::humble::video::ContainerStream::DISPOSITION_ORIGINAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1DISPOSITION_1COMMENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream::Disposition result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerStream::Disposition)io::humble::video::ContainerStream::DISPOSITION_COMMENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1DISPOSITION_1LYRICS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream::Disposition result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerStream::Disposition)io::humble::video::ContainerStream::DISPOSITION_LYRICS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1DISPOSITION_1KARAOKE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream::Disposition result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerStream::Disposition)io::humble::video::ContainerStream::DISPOSITION_KARAOKE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1DISPOSITION_1FORCED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream::Disposition result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerStream::Disposition)io::humble::video::ContainerStream::DISPOSITION_FORCED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1DISPOSITION_1HEARING_1IMPAIRED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream::Disposition result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerStream::Disposition)io::humble::video::ContainerStream::DISPOSITION_HEARING_IMPAIRED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1DISPOSITION_1VISUAL_1IMPAIRED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream::Disposition result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerStream::Disposition)io::humble::video::ContainerStream::DISPOSITION_VISUAL_IMPAIRED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1DISPOSITION_1CLEAN_1EFFECTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream::Disposition result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerStream::Disposition)io::humble::video::ContainerStream::DISPOSITION_CLEAN_EFFECTS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1DISPOSITION_1ATTACHED_1PIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream::Disposition result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerStream::Disposition)io::humble::video::ContainerStream::DISPOSITION_ATTACHED_PIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1PARSE_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream::ParseType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerStream::ParseType)io::humble::video::ContainerStream::PARSE_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1PARSE_1FULL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream::ParseType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerStream::ParseType)io::humble::video::ContainerStream::PARSE_FULL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1PARSE_1HEADERS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream::ParseType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerStream::ParseType)io::humble::video::ContainerStream::PARSE_HEADERS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1PARSE_1TIMESTAMPS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream::ParseType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerStream::ParseType)io::humble::video::ContainerStream::PARSE_TIMESTAMPS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1PARSE_1FULL_1ONCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream::ParseType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerStream::ParseType)io::humble::video::ContainerStream::PARSE_FULL_ONCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1PARSE_1FULL_1RAW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream::ParseType result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::ContainerStream::ParseType)io::humble::video::ContainerStream::PARSE_FULL_RAW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream *arg1 = (io::humble::video::ContainerStream *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getIndex();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream *arg1 = (io::humble::video::ContainerStream *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getId();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1getFrameRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::ContainerStream *arg1 = (io::humble::video::ContainerStream *) 0 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)(arg1)->getFrameRate();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1getTimeBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::ContainerStream *arg1 = (io::humble::video::ContainerStream *) 0 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)(arg1)->getTimeBase();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1getStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::ContainerStream *arg1 = (io::humble::video::ContainerStream *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getStartTime();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1getDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::ContainerStream *arg1 = (io::humble::video::ContainerStream *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getDuration();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1getCurrentDts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::ContainerStream *arg1 = (io::humble::video::ContainerStream *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getCurrentDts();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1getNumIndexEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream *arg1 = (io::humble::video::ContainerStream *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)(arg1)->getNumIndexEntries();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1getNumFrames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::ContainerStream *arg1 = (io::humble::video::ContainerStream *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getNumFrames();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1getSampleAspectRatio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::ContainerStream *arg1 = (io::humble::video::ContainerStream *) 0 ;
  io::humble::video::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Rational *)(arg1)->getSampleAspectRatio();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1getContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::ContainerStream *arg1 = (io::humble::video::ContainerStream *) 0 ;
  io::humble::video::Container *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Container *)(arg1)->getContainer();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Container **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1getParseType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream *arg1 = (io::humble::video::ContainerStream *) 0 ;
  io::humble::video::ContainerStream::ParseType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::ContainerStream::ParseType)(arg1)->getParseType();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1setParseType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  io::humble::video::ContainerStream *arg1 = (io::humble::video::ContainerStream *) 0 ;
  io::humble::video::ContainerStream::ParseType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerStream **)&jarg1; 
  arg2 = (io::humble::video::ContainerStream::ParseType)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setParseType(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1getMetaData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::ContainerStream *arg1 = (io::humble::video::ContainerStream *) 0 ;
  io::humble::video::KeyValueBag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::KeyValueBag *)(arg1)->getMetaData();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::KeyValueBag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1findTimeStampEntryInIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  io::humble::video::ContainerStream *arg1 = (io::humble::video::ContainerStream *) 0 ;
  int64_t arg2 ;
  int32_t arg3 ;
  io::humble::video::IndexEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerStream **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::IndexEntry *)(arg1)->findTimeStampEntryInIndex(arg2,arg3);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::IndexEntry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1findTimeStampPositionInIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream *arg1 = (io::humble::video::ContainerStream *) 0 ;
  int64_t arg2 ;
  int32_t arg3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerStream **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->findTimeStampPositionInIndex(arg2,arg3);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1getIndexEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  io::humble::video::ContainerStream *arg1 = (io::humble::video::ContainerStream *) 0 ;
  int32_t arg2 ;
  io::humble::video::IndexEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerStream **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::IndexEntry *)(arg1)->getIndexEntry(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::IndexEntry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_ContainerStream_1getDisposition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::ContainerStream *arg1 = (io::humble::video::ContainerStream *) 0 ;
  io::humble::video::ContainerStream::Disposition result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::ContainerStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::ContainerStream::Disposition)(arg1)->getDisposition();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Container_1FLAG_1GENPTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Container::Flag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Container::Flag)io::humble::video::Container::FLAG_GENPTS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Container_1FLAG_1IGNIDX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Container::Flag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Container::Flag)io::humble::video::Container::FLAG_IGNIDX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Container_1FLAG_1NONBLOCK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Container::Flag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Container::Flag)io::humble::video::Container::FLAG_NONBLOCK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Container_1FLAG_1IGNDTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Container::Flag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Container::Flag)io::humble::video::Container::FLAG_IGNDTS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Container_1FLAG_1NOFILLIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Container::Flag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Container::Flag)io::humble::video::Container::FLAG_NOFILLIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Container_1FLAG_1NOPARSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Container::Flag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Container::Flag)io::humble::video::Container::FLAG_NOPARSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Container_1FLAG_1NOBUFFER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Container::Flag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Container::Flag)io::humble::video::Container::FLAG_NOBUFFER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Container_1FLAG_1CUSTOM_1IO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Container::Flag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Container::Flag)io::humble::video::Container::FLAG_CUSTOM_IO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Container_1FLAG_1DISCARD_1CORRUPT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Container::Flag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Container::Flag)io::humble::video::Container::FLAG_DISCARD_CORRUPT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Container_1FLAG_1MP4A_1LATM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Container::Flag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Container::Flag)io::humble::video::Container::FLAG_MP4A_LATM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Container_1FLAG_1SORT_1DTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Container::Flag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Container::Flag)io::humble::video::Container::FLAG_SORT_DTS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Container_1FLAG_1PRIV_1OPT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Container::Flag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Container::Flag)io::humble::video::Container::FLAG_PRIV_OPT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Container_1FLAG_1KEEP_1SIDE_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Container::Flag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Container::Flag)io::humble::video::Container::FLAG_KEEP_SIDE_DATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Container_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Container *arg1 = (io::humble::video::Container *) 0 ;
  io::humble::video::Container::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Container **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Container::State)(arg1)->getState();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Container_1getNumStreams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Container *arg1 = (io::humble::video::Container *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Container **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getNumStreams();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Container_1getStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  io::humble::video::Container *arg1 = (io::humble::video::Container *) 0 ;
  int32_t arg2 ;
  io::humble::video::ContainerStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Container **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::ContainerStream *)(arg1)->getStream(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::ContainerStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SourceStream_1getAttachedPic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::SourceStream *arg1 = (io::humble::video::SourceStream *) 0 ;
  io::humble::video::Packet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::SourceStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Packet *)(arg1)->getAttachedPic();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Packet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Source_1make(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  io::humble::video::Source *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Source *)io::humble::video::Source::make();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::Source **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Source_1getFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  io::humble::video::ContainerFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::ContainerFormat *)(arg1)->getFormat();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::ContainerFormat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  io::humble::video::Container::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::Container::State)(arg1)->getState();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Source_1getSourceFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  io::humble::video::SourceFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::SourceFormat *)(arg1)->getSourceFormat();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::SourceFormat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1setInputBufferLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  int32_t arg2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->setInputBufferLength(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1getInputBufferLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getInputBufferLength();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jint jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  char *arg2 = (char *) 0 ;
  io::humble::video::SourceFormat *arg3 = (io::humble::video::SourceFormat *) 0 ;
  bool arg4 ;
  bool arg5 ;
  io::humble::video::KeyValueBag *arg6 = (io::humble::video::KeyValueBag *) 0 ;
  io::humble::video::KeyValueBag *arg7 = (io::humble::video::KeyValueBag *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(io::humble::video::SourceFormat **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = *(io::humble::video::KeyValueBag **)&jarg6; 
  arg7 = *(io::humble::video::KeyValueBag **)&jarg7; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->open((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->close();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Source_1getSourceStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  int32_t arg2 ;
  io::humble::video::SourceStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::SourceStream *)(arg1)->getSourceStream(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::SourceStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  io::humble::video::Packet *arg2 = (io::humble::video::Packet *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  arg2 = *(io::humble::video::Packet **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->read(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1queryStreamMetaData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->queryStreamMetaData();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Source_1getDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getDuration();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Source_1getStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getStartTime();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Source_1getFileSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getFileSize();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1getBitRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getBitRate();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1getFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getFlags();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_Source_1setFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setFlags(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_Source_1getFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  io::humble::video::Container::Flag arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  arg2 = (io::humble::video::Container::Flag)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->getFlag(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_Source_1setFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  io::humble::video::Container::Flag arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  arg2 = (io::humble::video::Container::Flag)jarg2; 
  arg3 = jarg3 ? true : false; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setFlag(arg2,arg3);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jstring JNICALL Java_io_humble_video_VideoJNI_Source_1getURL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getURL();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1getReadRetryCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getReadRetryCount();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_video_VideoJNI_Source_1setReadRetryCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setReadRetryCount(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return ;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jboolean JNICALL Java_io_humble_video_VideoJNI_Source_1canStreamsBeAddedDynamically(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->canStreamsBeAddedDynamically();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_Source_1getMetaData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  io::humble::video::KeyValueBag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::video::KeyValueBag *)(arg1)->getMetaData();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::video::KeyValueBag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1setForcedAudioCodec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  io::humble::video::Codec::ID arg2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  arg2 = (io::humble::video::Codec::ID)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->setForcedAudioCodec(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1setForcedVideoCodec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  io::humble::video::Codec::ID arg2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  arg2 = (io::humble::video::Codec::ID)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->setForcedVideoCodec(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1setForcedSubtitleCodec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  io::humble::video::Codec::ID arg2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  arg2 = (io::humble::video::Codec::ID)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->setForcedSubtitleCodec(arg2);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1SEEK_1BACKWARD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Source::SeekFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Source::SeekFlag)io::humble::video::Source::SEEK_BACKWARD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1SEEK_1BYTE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Source::SeekFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Source::SeekFlag)io::humble::video::Source::SEEK_BYTE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1SEEK_1ANY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Source::SeekFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Source::SeekFlag)io::humble::video::Source::SEEK_ANY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1SEEK_1FRAME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::video::Source::SeekFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::video::Source::SeekFlag)io::humble::video::Source::SEEK_FRAME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1seek(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6) {
  jint jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  int32_t arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int64_t arg5 ;
  int32_t arg6 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  arg5 = (int64_t)jarg5; 
  arg6 = (int32_t)jarg6; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->seek(arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1getMaxDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getMaxDelay();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1play(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->play();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_video_VideoJNI_Source_1pause(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::video::Source *arg1 = (io::humble::video::Source *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::video::Source **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->pause();
    }
    catch(std::invalid_argument & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/IllegalArgumentException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(std::bad_alloc & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        // OK, this is bad and may mean we can't do things like 
        // allocate a new class at this time; but we should have
        // one lying around
        io::humble::ferry::JNIHelper *helper = 
        io::humble::ferry::JNIHelper::getHelper();
        if (helper) {
          helper->throwOutOfMemoryError();
        }
      }
      return 0;
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGPixelFormatUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::video::PixelFormat **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGRationalUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::video::Rational **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGGlobalUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::video::Global **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGKeyValueBagUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::video::KeyValueBag **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGPropertyUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::video::Property **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGMediaUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::video::Media **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGMediaEncodedUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::video::Media **)&baseptr = *(io::humble::video::MediaEncoded **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGMediaRawUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::video::Media **)&baseptr = *(io::humble::video::MediaRaw **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGAudioFormatUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::video::AudioFormat **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGAudioChannelUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::video::AudioChannel **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGMediaAudioUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::video::MediaRaw **)&baseptr = *(io::humble::video::MediaAudio **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGAudioSamplesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::video::MediaRaw **)&baseptr = *(io::humble::video::AudioSamples **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGVideoPictureUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::video::MediaRaw **)&baseptr = *(io::humble::video::VideoPicture **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGErrorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::video::Error **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGPacketUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::video::MediaEncoded **)&baseptr = *(io::humble::video::Packet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGConfigurableUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::video::Configurable **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGMediaDescriptorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::video::MediaDescriptor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGCodecProfileUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::video::CodecProfile **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGCodecUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::video::Codec **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGCodecDescriptorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::video::CodecDescriptor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGContainerFormatUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::video::ContainerFormat **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGSinkFormatUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::video::ContainerFormat **)&baseptr = *(io::humble::video::SinkFormat **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGSourceFormatUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::video::ContainerFormat **)&baseptr = *(io::humble::video::SourceFormat **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGIndexEntryUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::video::IndexEntry **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGContainerStreamUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::video::ContainerStream **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGContainerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::video::Configurable **)&baseptr = *(io::humble::video::Container **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGSourceStreamUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::video::ContainerStream **)&baseptr = *(io::humble::video::SourceStream **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_video_VideoJNI_SWIGSourceUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::video::Container **)&baseptr = *(io::humble::video::Source **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

