/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.humble.video;
import io.humble.ferry.*;
/**
 * The parent class for all Raw media data.  
 */
public class MediaRawData extends MediaData {
  // JNIHelper.swg: Start generated code
  // >>>>>>>>>>>>>>>>>>>>>>>>>>>
  /**
   * This method is only here to use some references and remove
   * a Eclipse compiler warning.
   */
  @SuppressWarnings("unused")
  private void noop()
  {
    IBuffer.make(null, 1);
  }
   
  private volatile long swigCPtr;

  /**
   * Internal Only.
   */
  protected MediaRawData(long cPtr, boolean cMemoryOwn) {
    super(VideoJNI.SWIGMediaRawDataUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }
  
  /**
   * Internal Only.
   */
  protected MediaRawData(long cPtr, boolean cMemoryOwn,
      java.util.concurrent.atomic.AtomicLong ref)
  {
    super(VideoJNI.SWIGMediaRawDataUpcast(cPtr),
     cMemoryOwn, ref);
    swigCPtr = cPtr;
  }
    
  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that obj is proxying for.
   *   
   * @param obj The java proxy object for a native object.
   * @return The raw pointer obj is proxying for.
   */
  protected static long getCPtr(MediaRawData obj) {
    if (obj == null) return 0;
    return obj.getMyCPtr();
  }

  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that we're proxying for.
   *   
   * @return The raw pointer we're proxying for.
   */  
  protected long getMyCPtr() {
    if (swigCPtr == 0) throw new IllegalStateException("underlying native object already deleted");
    return swigCPtr;
  }
  
  /**
   * Create a new MediaRawData object that is actually referring to the
   * exact same underlying native object.
   *
   * @return the new Java object.
   */
  @Override
  public MediaRawData copyReference() {
    if (swigCPtr == 0)
      return null;
    else
      return new MediaRawData(swigCPtr, swigCMemOwn, getJavaRefCount());
  }

  /**
   * Compares two values, returning true if the underlying objects in native code are the same object.
   *
   * That means you can have two different Java objects, but when you do a comparison, you'll find out
   * they are the EXACT same object.
   *
   * @return True if the underlying native object is the same.  False otherwise.
   */
  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof MediaRawData)
      equal = (((MediaRawData)obj).swigCPtr == this.swigCPtr);
    return equal;
  }
  
  /**
   * Get a hashable value for this object.
   *
   * @return the hashable value.
   */
  public int hashCode() {
     return (int)swigCPtr;
  }
  
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<
  // JNIHelper.swg: End generated code
  
/**
 * Get the presentation time stamp  
 */
  public long getPts() {
    return VideoJNI.MediaRawData_getPts(swigCPtr, this);
  }

/**
 * Get any meta-data associated with this media item  
 */
  public KeyValueBag getMetaData() {
    long cPtr = VideoJNI.MediaRawData_getMetaData(swigCPtr, this);
    return (cPtr == 0) ? null : new KeyValueBag(cPtr, false);
  }

/**
 * pts copied from the Packet that was decoded to produce this frame 
 *  
 * - encoding: unused  
 * - decoding: Read by user.  
 */
  public long getPacketPts() {
    return VideoJNI.MediaRawData_getPacketPts(swigCPtr, this);
  }

/**
 * dts copied from the Packet that triggered returning this frame  
 * - encoding: unused  
 * - decoding: Read by user.  
 */
  public long getPacketDts() {
    return VideoJNI.MediaRawData_getPacketDts(swigCPtr, this);
  }

/**
 * size of the corresponding packet containing the compressed  
 * frame.  
 * It is set to a negative value if unknown.  
 * - encoding: unused  
 * - decoding: set by libavcodec, read by user.  
 */
  public int getPacketSize() {
    return VideoJNI.MediaRawData_getPacketSize(swigCPtr, this);
  }

/**
 * duration of the corresponding packet, expressed in  
 * ContainerStream.getTimeBase() units, 0 if unknown.  
 * - encoding: unused  
 * - decoding: Read by user.  
 */
  public long getPacketDuration() {
    return VideoJNI.MediaRawData_getPacketDuration(swigCPtr, this);
  }

/**
 * frame timestamp estimated using various heuristics, in stream time 
 * base  
 * - encoding: unused  
 * - decoding: set by libavcodec, read by user.  
 */
  public long getBestEffortTimeStamp() {
    return VideoJNI.MediaRawData_getBestEffortTimeStamp(swigCPtr, this);
  }

/**
 * Total size in bytes of the decoded media.  
 * @return	number of bytes of decoded media  
 */
  public int getSize() {
    return VideoJNI.MediaRawData_getSize(swigCPtr, this);
  }

}
