/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.humble.video;
import io.humble.ferry.*;
public class Decoder extends Coder {
  // JNIHelper.swg: Start generated code
  // >>>>>>>>>>>>>>>>>>>>>>>>>>>
  /**
   * This method is only here to use some references and remove
   * a Eclipse compiler warning.
   */
  @SuppressWarnings("unused")
  private void noop()
  {
    IBuffer.make(null, 1);
  }
   
  private volatile long swigCPtr;

  /**
   * Internal Only.
   */
  protected Decoder(long cPtr, boolean cMemoryOwn) {
    super(VideoJNI.SWIGDecoderUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }
  
  /**
   * Internal Only.
   */
  protected Decoder(long cPtr, boolean cMemoryOwn,
      java.util.concurrent.atomic.AtomicLong ref)
  {
    super(VideoJNI.SWIGDecoderUpcast(cPtr),
     cMemoryOwn, ref);
    swigCPtr = cPtr;
  }
    
  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that obj is proxying for.
   *   
   * @param obj The java proxy object for a native object.
   * @return The raw pointer obj is proxying for.
   */
  protected static long getCPtr(Decoder obj) {
    if (obj == null) return 0;
    return obj.getMyCPtr();
  }

  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that we're proxying for.
   *   
   * @return The raw pointer we're proxying for.
   */  
  protected long getMyCPtr() {
    if (swigCPtr == 0) throw new IllegalStateException("underlying native object already deleted");
    return swigCPtr;
  }
  
  /**
   * Create a new Decoder object that is actually referring to the
   * exact same underlying native object.
   *
   * @return the new Java object.
   */
  @Override
  public Decoder copyReference() {
    if (swigCPtr == 0)
      return null;
    else
      return new Decoder(swigCPtr, swigCMemOwn, getJavaRefCount());
  }

  /**
   * Compares two values, returning true if the underlying objects in native code are the same object.
   *
   * That means you can have two different Java objects, but when you do a comparison, you'll find out
   * they are the EXACT same object.
   *
   * @return True if the underlying native object is the same.  False otherwise.
   */
  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof Decoder)
      equal = (((Decoder)obj).swigCPtr == this.swigCPtr);
    return equal;
  }
  
  /**
   * Get a hashable value for this object.
   *
   * @return the hashable value.
   */
  public int hashCode() {
     return (int)swigCPtr;
  }
  
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<
  // JNIHelper.swg: End generated code
  

/**
 *  
 * @return	a {@link Decoder}  
 * @throws	InvalidArgument if codec is null or codec cannot decode. 
 *		  
 */
  public static Decoder make(Codec codec) {
    long cPtr = VideoJNI.Decoder_make__SWIG_0(Codec.getCPtr(codec), codec);
    return (cPtr == 0) ? null : new Decoder(cPtr, false);
  }

/**
 * Creates a {@link Decoder} from a given {@link Decoder}  
 * @return	a {@link Decoder}  
 * @throws	InvalidArgument if src is null  
 */
  public static Decoder make(Decoder src) {
    long cPtr = VideoJNI.Decoder_make__SWIG_1(Decoder.getCPtr(src), src);
    return (cPtr == 0) ? null : new Decoder(cPtr, false);
  }

  public int getFrameSize() {
    return VideoJNI.Decoder_getFrameSize(swigCPtr, this);
  }

/**
 * Flush this {@link Decoder}, getting rid of any cached packets (call 
 * after seek).  
 * Next packet given to decode should be a key packet.  
 */
  public void flush() {
    VideoJNI.Decoder_flush(swigCPtr, this);
  }

/**
 * Decode this packet into output. It will  
 * try to fill up the audio samples object, starting  
 * from the byteOffset inside this packet.  
 * <p>  
 * The caller is responsible for allocating the  
 * MediaAudio object. This function will overwrite  
 * any data in the samples object.  
 * </p>  
 * @param	output The MediaAudio we decode to. Caller must check if it 
 *		 is complete on return.  
 * @param	packet The packet we're attempting to decode from.  
 *  
 * @return	number of bytes actually processed from the packet, or negative 
 *		 for error  
 */
  public int decodeAudio(MediaAudio output, MediaPacket packet, int byteOffset) {
    return VideoJNI.Decoder_decodeAudio(swigCPtr, this, MediaAudio.getCPtr(output), output, MediaPacket.getCPtr(packet), packet, byteOffset);
  }

/**
 * Decode this packet into output.  
 * The caller is responsible for allocating the  
 * MediaPicture object. This function will potentially  
 * overwrite any data in the frame object, but  
 * you should pass the same MediaPicture into this function  
 * repeatedly until Media.isComplete() is true.  
 * @param	output The MediaPicture we decode. Caller must check if it 
 *		 is complete on return.  
 * @param	packet The packet we're attempting to decode from.  
 *  
 * @return	number of bytes actually processed from the packet, or negative 
 *		 for error  
 */
  public int decodeVideo(MediaPicture output, MediaPacket packet, int byteOffset) {
    return VideoJNI.Decoder_decodeVideo(swigCPtr, this, MediaPicture.getCPtr(output), output, MediaPacket.getCPtr(packet), packet, byteOffset);
  }

/**
 * Decode this packet into output.  
 * The caller is responsible for allocating the  
 * MediaPicture object. This function will potentially  
 * overwrite any data in the frame object, but  
 * you should pass the same MediaPicture into this function  
 * repeatedly until Media.isComplete() is true.  
 * @param	output The MediaPicture we decode. Caller must check if it 
 *		 is complete on return.  
 * @param	packet The packet we're attempting to decode from.  
 *  
 * @return	number of bytes actually processed from the packet, or negative 
 *		 for error  
 */
  public int decodeSubtitle(MediaSubtitle output, MediaPacket packet, int byteOffset) {
    return VideoJNI.Decoder_decodeSubtitle(swigCPtr, this, MediaSubtitle.getCPtr(output), output, MediaPacket.getCPtr(packet), packet, byteOffset);
  }

}
