/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.humble.video;
import io.humble.ferry.*;
public class FilterGraph extends Configurable {
  // JNIHelper.swg: Start generated code
  // >>>>>>>>>>>>>>>>>>>>>>>>>>>
  /**
   * This method is only here to use some references and remove
   * a Eclipse compiler warning.
   */
  @SuppressWarnings("unused")
  private void noop()
  {
    Buffer.make(null, 1);
  }
   
  private volatile long swigCPtr;

  /**
   * Internal Only.
   */
  protected FilterGraph(long cPtr, boolean cMemoryOwn) {
    super(VideoJNI.SWIGFilterGraphUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }
  
  /**
   * Internal Only.
   */
  protected FilterGraph(long cPtr, boolean cMemoryOwn,
      java.util.concurrent.atomic.AtomicLong ref)
  {
    super(VideoJNI.SWIGFilterGraphUpcast(cPtr),
     cMemoryOwn, ref);
    swigCPtr = cPtr;
  }
    
  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that obj is proxying for.
   *   
   * @param obj The java proxy object for a native object.
   * @return The raw pointer obj is proxying for.
   */
  protected static long getCPtr(FilterGraph obj) {
    if (obj == null) return 0;
    return obj.getMyCPtr();
  }

  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that we're proxying for.
   *   
   * @return The raw pointer we're proxying for.
   */  
  protected long getMyCPtr() {
    if (swigCPtr == 0) throw new IllegalStateException("underlying native object already deleted");
    return swigCPtr;
  }
  
  /**
   * Create a new FilterGraph object that is actually referring to the
   * exact same underlying native object.
   *
   * @return the new Java object.
   */
  @Override
  public FilterGraph copyReference() {
    if (swigCPtr == 0)
      return null;
    else
      return new FilterGraph(swigCPtr, swigCMemOwn, getJavaRefCount());
  }

  /**
   * Compares two values, returning true if the underlying objects in native code are the same object.
   *
   * That means you can have two different Java objects, but when you do a comparison, you'll find out
   * they are the EXACT same object.
   *
   * @return True if the underlying native object is the same.  False otherwise.
   */
  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof FilterGraph)
      equal = (((FilterGraph)obj).swigCPtr == this.swigCPtr);
    return equal;
  }
  
  /**
   * Get a hashable value for this object.
   *
   * @return the hashable value.
   */
  public int hashCode() {
     return (int)swigCPtr;
  }
  
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<
  // JNIHelper.swg: End generated code
  

  public void addFilter(FilterType type, String name) {
    VideoJNI.FilterGraph_addFilter(swigCPtr, this, FilterType.getCPtr(type), type, name);
  }

  public Filter getFilter(String name) {
    long cPtr = VideoJNI.FilterGraph_getFilter(swigCPtr, this, name);
    return (cPtr == 0) ? null : new Filter(cPtr, false);
  }

  public void setAutoConvert(FilterGraph.AutoConvertFlag value) {
    VideoJNI.FilterGraph_setAutoConvert(swigCPtr, this, value.swigValue());
  }

  public FilterGraph.AutoConvertFlag getAutoConvert() {
    return FilterGraph.AutoConvertFlag.swigToEnum(VideoJNI.FilterGraph_getAutoConvert(swigCPtr, this));
  }

  public void open() {
    VideoJNI.FilterGraph_open(swigCPtr, this);
  }

  public String sendCommand(String target, String command, String arguments, int flags) {
    return VideoJNI.FilterGraph_sendCommand(swigCPtr, this, target, command, arguments, flags);
  }

/**
 * Queue a command for one or more filter instances.  
 *  
 * "all" sends to all filters  
 * otherwise it can be a filter or filter instance name  
 * which will send the command to all matching filters.  
 * @param	command the command to sent, for handling simplicity all commands 
 *		 must be alphanummeric only  
 * @param	arguments the argument for the command  
 * @param	ts time at which the command should be sent to the filter 
 *		  
 * 
 * from the filter is provided, also AVFILTER_CMD_FLAG_ONE is not supported. 
 *  
 */
  public void queueCommand(String target, String command, String arguments, int flags, double ts) {
    VideoJNI.FilterGraph_queueCommand(swigCPtr, this, target, command, arguments, flags, ts);
  }

  public String getHumanReadableString() {
    return VideoJNI.FilterGraph_getHumanReadableString(swigCPtr, this);
  }

  public enum AutoConvertFlag {
  /**
   * all automatic conversions enabled
   */
    AUTO_CONVERT_ALL(VideoJNI.FilterGraph_AUTO_CONVERT_ALL_get()),
  /**
   * all automatic conversions disabled
   */
    AUTO_CONVERT_NONE(VideoJNI.FilterGraph_AUTO_CONVERT_NONE_get());

    public final int swigValue() {
      return swigValue;
    }

    public static AutoConvertFlag swigToEnum(int swigValue) {
      AutoConvertFlag[] swigValues = AutoConvertFlag.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (AutoConvertFlag swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + AutoConvertFlag.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private AutoConvertFlag() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private AutoConvertFlag(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private AutoConvertFlag(AutoConvertFlag swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
