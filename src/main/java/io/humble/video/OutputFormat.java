/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.humble.video;
import io.humble.ferry.*;
public class OutputFormat extends ContainerFormat {
  // JNIHelper.swg: Start generated code
  // >>>>>>>>>>>>>>>>>>>>>>>>>>>
  /**
   * This method is only here to use some references and remove
   * a Eclipse compiler warning.
   */
  @SuppressWarnings("unused")
  private void noop()
  {
    IBuffer.make(null, 1);
  }
   
  private volatile long swigCPtr;

  /**
   * Internal Only.
   */
  protected OutputFormat(long cPtr, boolean cMemoryOwn) {
    super(VideoJNI.SWIGOutputFormatUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }
  
  /**
   * Internal Only.
   */
  protected OutputFormat(long cPtr, boolean cMemoryOwn,
      java.util.concurrent.atomic.AtomicLong ref)
  {
    super(VideoJNI.SWIGOutputFormatUpcast(cPtr),
     cMemoryOwn, ref);
    swigCPtr = cPtr;
  }
    
  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that obj is proxying for.
   *   
   * @param obj The java proxy object for a native object.
   * @return The raw pointer obj is proxying for.
   */
  public static long getCPtr(OutputFormat obj) {
    if (obj == null) return 0;
    return obj.getMyCPtr();
  }

  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that we're proxying for.
   *   
   * @return The raw pointer we're proxying for.
   */  
  public long getMyCPtr() {
    if (swigCPtr == 0) throw new IllegalStateException("underlying native object already deleted");
    return swigCPtr;
  }
  
  /**
   * Create a new OutputFormat object that is actually referring to the
   * exact same underlying native object.
   *
   * @return the new Java object.
   */
  @Override
  public OutputFormat copyReference() {
    if (swigCPtr == 0)
      return null;
    else
      return new OutputFormat(swigCPtr, swigCMemOwn, getJavaRefCount());
  }

  /**
   * Compares two values, returning true if the underlying objects in native code are the same object.
   *
   * That means you can have two different Java objects, but when you do a comparison, you'll find out
   * they are the EXACT same object.
   *
   * @return True if the underlying native object is the same.  False otherwise.
   */
  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof OutputFormat)
      equal = (((OutputFormat)obj).swigCPtr == this.swigCPtr);
    return equal;
  }
  
  /**
   * Get a hashable value for this object.
   *
   * @return the hashable value.
   */
  public int hashCode() {
     return (int)swigCPtr;
  }
  
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<
  // JNIHelper.swg: End generated code
  

/**
 * Name for format.  
 */
  public String getName() {
    return VideoJNI.OutputFormat_getName(swigCPtr, this);
  }

/**
 * Descriptive name for the format, meant to be more human-readable 
 *  
 * than name.  
 */
  public String getLongName() {
    return VideoJNI.OutputFormat_getLongName(swigCPtr, this);
  }

/**
 * A comma-separated list of supported filename extensions  
 */
  public String getExtensions() {
    return VideoJNI.OutputFormat_getExtensions(swigCPtr, this);
  }

/**
 * Flags that tell you what capabilities this format supports.  
 * @return	a bitmask of {@link Flags}  
 */
  public int getFlags() {
    return VideoJNI.OutputFormat_getFlags(swigCPtr, this);
  }

/**
 * Get the default audio codec for this format.  
 */
  public Codec.Id getDefaultAudioCodecId() {
    return Codec.Id.swigToEnum(VideoJNI.OutputFormat_getDefaultAudioCodecId(swigCPtr, this));
  }

  public Codec.Id getDefaultVideoCodecId() {
    return Codec.Id.swigToEnum(VideoJNI.OutputFormat_getDefaultVideoCodecId(swigCPtr, this));
  }

  public Codec.Id getDefaultSubtitleCodecId() {
    return Codec.Id.swigToEnum(VideoJNI.OutputFormat_getDefaultSubtitleCodecId(swigCPtr, this));
  }

  public String getMimeType() {
    return VideoJNI.OutputFormat_getMimeType(swigCPtr, this);
  }

/**
 * Return the output format in the list of registered output formats 
 *  
 * which best matches the provided parameters, or return NULL if  
 * there is no match.  
 * @param	shortName if non-NULL checks if short_name matches with the 
 *		  
 * names of the registered formats  
 * @param	filename if non-NULL checks if filename terminates with the 
 *		  
 * extensions of the registered formats  
 * @param	mimeType if non-NULL checks if mime_type matches with the 
 *		  
 * MIME type of the registered formats  
 */
  public static OutputFormat guessFormat(String shortName, String filename, String mimeType) {
    long cPtr = VideoJNI.OutputFormat_guessFormat(shortName, filename, mimeType);
    return (cPtr == 0) ? null : new OutputFormat(cPtr, false);
  }

  public Codec.Id guessCodec(String shortName, String filename, String mimeType, ContainerFormat.MediaType type) {
    return Codec.Id.swigToEnum(VideoJNI.OutputFormat_guessCodec(swigCPtr, this, shortName, filename, mimeType, type.swigValue()));
  }

}
