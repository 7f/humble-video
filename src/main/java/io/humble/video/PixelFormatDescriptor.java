/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.humble.video;
import io.humble.ferry.*;
/**
 * Descriptor that unambiguously describes how the bits of a pixel are 
 *  
 * stored in the up to 4 data planes of an image. It also stores the 
 *  
 * subsampling factors and number of components.  
 * 
 * and all the YUV variants) AVPixFmtDescriptor just stores how values 
 *  
 * are stored not what these values represent.  
 */
public class PixelFormatDescriptor extends RefCounted {
  // JNIHelper.swg: Start generated code
  // >>>>>>>>>>>>>>>>>>>>>>>>>>>
  /**
   * This method is only here to use some references and remove
   * a Eclipse compiler warning.
   */
  @SuppressWarnings("unused")
  private void noop()
  {
    IBuffer.make(null, 1);
  }
   
  private volatile long swigCPtr;

  /**
   * Internal Only.
   */
  protected PixelFormatDescriptor(long cPtr, boolean cMemoryOwn) {
    super(VideoJNI.SWIGPixelFormatDescriptorUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }
  
  /**
   * Internal Only.
   */
  protected PixelFormatDescriptor(long cPtr, boolean cMemoryOwn,
      java.util.concurrent.atomic.AtomicLong ref)
  {
    super(VideoJNI.SWIGPixelFormatDescriptorUpcast(cPtr),
     cMemoryOwn, ref);
    swigCPtr = cPtr;
  }
    
  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that obj is proxying for.
   *   
   * @param obj The java proxy object for a native object.
   * @return The raw pointer obj is proxying for.
   */
  protected static long getCPtr(PixelFormatDescriptor obj) {
    if (obj == null) return 0;
    return obj.getMyCPtr();
  }

  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that we're proxying for.
   *   
   * @return The raw pointer we're proxying for.
   */  
  protected long getMyCPtr() {
    if (swigCPtr == 0) throw new IllegalStateException("underlying native object already deleted");
    return swigCPtr;
  }
  
  /**
   * Create a new PixelFormatDescriptor object that is actually referring to the
   * exact same underlying native object.
   *
   * @return the new Java object.
   */
  @Override
  public PixelFormatDescriptor copyReference() {
    if (swigCPtr == 0)
      return null;
    else
      return new PixelFormatDescriptor(swigCPtr, swigCMemOwn, getJavaRefCount());
  }

  /**
   * Compares two values, returning true if the underlying objects in native code are the same object.
   *
   * That means you can have two different Java objects, but when you do a comparison, you'll find out
   * they are the EXACT same object.
   *
   * @return True if the underlying native object is the same.  False otherwise.
   */
  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof PixelFormatDescriptor)
      equal = (((PixelFormatDescriptor)obj).swigCPtr == this.swigCPtr);
    return equal;
  }
  
  /**
   * Get a hashable value for this object.
   *
   * @return the hashable value.
   */
  public int hashCode() {
     return (int)swigCPtr;
  }
  
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<
  // JNIHelper.swg: End generated code
  
/**
 * Get the name of this pixel descriptor  
 */
  public String getName() {
    return VideoJNI.PixelFormatDescriptor_getName(swigCPtr, this);
  }

/**
 * The number of components each pixel has, (1-4)  
 */
  public short getNumComponents() {
    return VideoJNI.PixelFormatDescriptor_getNumComponents(swigCPtr, this);
  }

/**
 * Amount to shift the luma width right to find the chroma width.  
 * For YV12 this is 1 for example.  
 * chroma_width = -((-luma_width) >> log2_chroma_w)  
 * The note above is needed to ensure rounding up.  
 * This value only refers to the chroma components.  
 */
  public short getLog2ChromaWidth() {
    return VideoJNI.PixelFormatDescriptor_getLog2ChromaWidth(swigCPtr, this);
  }

/**
 * Amount to shift the luma height right to find the chroma height. 
 *  
 * For YV12 this is 1 for example.  
 * chroma_height= -((-luma_height) >> log2_chroma_h)  
 * The note above is needed to ensure rounding up.  
 * This value only refers to the chroma components.  
 */
  public short getLog2ChromaHeight() {
    return VideoJNI.PixelFormatDescriptor_getLog2ChromaHeight(swigCPtr, this);
  }

  public short getFlags() {
    return VideoJNI.PixelFormatDescriptor_getFlags(swigCPtr, this);
  }

/**
 * Return the number of bits per pixel used by the pixel format  
 * described by pixdesc. Note that this is not the same as the number 
 *  
 * of bits per sample.  
 * The returned number of bits refers to the number of bits actually 
 *  
 * used for storing the pixel information, that is padding bits are 
 *  
 * not counted.  
 */
  public int getBitsPerPixel() {
    return VideoJNI.PixelFormatDescriptor_getBitsPerPixel(swigCPtr, this);
  }

/**
 * Return the number of bits per pixel for the pixel format  
 * described by pixdesc, including any padding or unused bits.  
 */
  public int getPaddedBitsPerPixel() {
    return VideoJNI.PixelFormatDescriptor_getPaddedBitsPerPixel(swigCPtr, this);
  }

/**
 * Parameters that describe how pixels are packed.  
 * If the format has 2 or 4 components, then alpha is last.  
 * If the format has 1 or 2 components, then luma is 0.  
 * If the format has 3 or 4 components,  
 *  
 * otherwise 0 is luma, 1 is chroma-U and 2 is chroma-V.  
 */
  public PixelComponentDescriptor getComponentDescriptor(int component) {
    long cPtr = VideoJNI.PixelFormatDescriptor_getComponentDescriptor(swigCPtr, this, component);
    return (cPtr == 0) ? null : new PixelComponentDescriptor(cPtr, false);
  }

/**
 * @return	an PixelFormat id described by desc, or PixelFormat.Type.PIX_FMT_NONE 
 *		 if desc  
 * is not a valid pointer to a pixel format descriptor.  
 */
  public PixelFormat.Type getFormat() {
    return PixelFormat.Type.swigToEnum(VideoJNI.PixelFormatDescriptor_getFormat(swigCPtr, this));
  }

}
