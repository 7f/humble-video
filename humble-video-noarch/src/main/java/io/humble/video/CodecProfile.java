/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.humble.video;
import io.humble.ferry.*;
/**
 * A profile supported by a Codec.
 */
public class CodecProfile extends RefCounted {
  // JNIHelper.swg: Start generated code
  // >>>>>>>>>>>>>>>>>>>>>>>>>>>
  /**
   * This method is only here to use some references and remove
   * a Eclipse compiler warning.
   */
  @SuppressWarnings("unused")
  private void noop()
  {
    Buffer.make(null, 1);
  }
   
  private volatile long swigCPtr;

  /**
   * Internal Only.
   */
  protected CodecProfile(long cPtr, boolean cMemoryOwn) {
    super(VideoJNI.CodecProfile_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }
  
  /**
   * Internal Only.
   */
  protected CodecProfile(long cPtr, boolean cMemoryOwn,
      java.util.concurrent.atomic.AtomicLong ref)
  {
    super(VideoJNI.CodecProfile_SWIGUpcast(cPtr),
     cMemoryOwn, ref);
    swigCPtr = cPtr;
  }
    
  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that obj is proxying for.
   *   
   * @param obj The java proxy object for a native object.
   * @return The raw pointer obj is proxying for.
   */
  protected static long getCPtr(CodecProfile obj) {
    if (obj == null) return 0;
    return obj.getMyCPtr();
  }

  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that we're proxying for.
   *   
   * @return The raw pointer we're proxying for.
   */  
  protected long getMyCPtr() {
    if (swigCPtr == 0) throw new IllegalStateException("underlying native object already deleted");
    return swigCPtr;
  }
  
  /**
   * Create a new CodecProfile object that is actually referring to the
   * exact same underlying native object.
   *
   * @return the new Java object.
   */
  @Override
  public CodecProfile copyReference() {
    if (swigCPtr == 0)
      return null;
    else
      return new CodecProfile(swigCPtr, swigCMemOwn, getJavaRefCount());
  }

  /**
   * Compares two values, returning true if the underlying objects in native code are the same object.
   *
   * That means you can have two different Java objects, but when you do a comparison, you'll find out
   * they are the EXACT same object.
   *
   * @return True if the underlying native object is the same.  False otherwise.
   */
  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof CodecProfile)
      equal = (((CodecProfile)obj).swigCPtr == this.swigCPtr);
    return equal;
  }
  
  /**
   * Get a hashable value for this object.
   *
   * @return the hashable value.
   */
  public int hashCode() {
     return (int)swigCPtr;
  }
  
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<
  // JNIHelper.swg: End generated code
  
/**
 * Get the type for this profile. 
 */
  public CodecProfile.ProfileType getProfile() {
    return CodecProfile.ProfileType.swigToEnum(VideoJNI.CodecProfile_getProfile(swigCPtr, this));
  }

/**
 * Get the name for this profile. 
 */
  public String getName() {
    return VideoJNI.CodecProfile_getName(swigCPtr, this);
  }

  /**
   * An enum of known about Profiles. Note these<br>
   * constants are not guaranteed to remain accessible<br>
   * through releases, and so should be only used<br>
   * to display meta information.
   */
  public enum ProfileType {
    PROFILE_UNKNOWN(VideoJNI.CodecProfile_PROFILE_UNKNOWN_get()),
    PROFILE_RESERVED(VideoJNI.CodecProfile_PROFILE_RESERVED_get()),
    PROFILE_AAC_MAIN(VideoJNI.CodecProfile_PROFILE_AAC_MAIN_get()),
    PROFILE_AAC_LOW(VideoJNI.CodecProfile_PROFILE_AAC_LOW_get()),
    PROFILE_AAC_SSR(VideoJNI.CodecProfile_PROFILE_AAC_SSR_get()),
    PROFILE_AAC_LTP(VideoJNI.CodecProfile_PROFILE_AAC_LTP_get()),
    PROFILE_AAC_HE(VideoJNI.CodecProfile_PROFILE_AAC_HE_get()),
    PROFILE_AAC_HE_V2(VideoJNI.CodecProfile_PROFILE_AAC_HE_V2_get()),
    PROFILE_AAC_LD(VideoJNI.CodecProfile_PROFILE_AAC_LD_get()),
    PROFILE_AAC_ELD(VideoJNI.CodecProfile_PROFILE_AAC_ELD_get()),
    PROFILE_DTS(VideoJNI.CodecProfile_PROFILE_DTS_get()),
    PROFILE_DTS_ES(VideoJNI.CodecProfile_PROFILE_DTS_ES_get()),
    PROFILE_DTS_96_24(VideoJNI.CodecProfile_PROFILE_DTS_96_24_get()),
    PROFILE_DTS_HD_HRA(VideoJNI.CodecProfile_PROFILE_DTS_HD_HRA_get()),
    PROFILE_DTS_HD_MA(VideoJNI.CodecProfile_PROFILE_DTS_HD_MA_get()),
    PROFILE_MPEG2_422(VideoJNI.CodecProfile_PROFILE_MPEG2_422_get()),
    PROFILE_MPEG2_HIGH(VideoJNI.CodecProfile_PROFILE_MPEG2_HIGH_get()),
    PROFILE_MPEG2_SS(VideoJNI.CodecProfile_PROFILE_MPEG2_SS_get()),
    PROFILE_MPEG2_SNR_SCALABLE(VideoJNI.CodecProfile_PROFILE_MPEG2_SNR_SCALABLE_get()),
    PROFILE_MPEG2_MAIN(VideoJNI.CodecProfile_PROFILE_MPEG2_MAIN_get()),
    PROFILE_MPEG2_SIMPLE(VideoJNI.CodecProfile_PROFILE_MPEG2_SIMPLE_get()),
    PROFILE_H264_CONSTRAINED(VideoJNI.CodecProfile_PROFILE_H264_CONSTRAINED_get()),
    PROFILE_H264_INTRA(VideoJNI.CodecProfile_PROFILE_H264_INTRA_get()),
    PROFILE_H264_BASELINE(VideoJNI.CodecProfile_PROFILE_H264_BASELINE_get()),
    PROFILE_H264_CONSTRAINED_BASELINE(VideoJNI.CodecProfile_PROFILE_H264_CONSTRAINED_BASELINE_get()),
    PROFILE_H264_MAIN(VideoJNI.CodecProfile_PROFILE_H264_MAIN_get()),
    PROFILE_H264_EXTENDED(VideoJNI.CodecProfile_PROFILE_H264_EXTENDED_get()),
    PROFILE_H264_HIGH(VideoJNI.CodecProfile_PROFILE_H264_HIGH_get()),
    PROFILE_H264_HIGH_10(VideoJNI.CodecProfile_PROFILE_H264_HIGH_10_get()),
    PROFILE_H264_HIGH_10_INTRA(VideoJNI.CodecProfile_PROFILE_H264_HIGH_10_INTRA_get()),
    PROFILE_H264_HIGH_422(VideoJNI.CodecProfile_PROFILE_H264_HIGH_422_get()),
    PROFILE_H264_HIGH_422_INTRA(VideoJNI.CodecProfile_PROFILE_H264_HIGH_422_INTRA_get()),
    PROFILE_H264_HIGH_444(VideoJNI.CodecProfile_PROFILE_H264_HIGH_444_get()),
    PROFILE_H264_HIGH_444_PREDICTIVE(VideoJNI.CodecProfile_PROFILE_H264_HIGH_444_PREDICTIVE_get()),
    PROFILE_H264_HIGH_444_INTRA(VideoJNI.CodecProfile_PROFILE_H264_HIGH_444_INTRA_get()),
    PROFILE_H264_CAVLC_444(VideoJNI.CodecProfile_PROFILE_H264_CAVLC_444_get()),
    PROFILE_VC1_SIMPLE(VideoJNI.CodecProfile_PROFILE_VC1_SIMPLE_get()),
    PROFILE_VC1_MAIN(VideoJNI.CodecProfile_PROFILE_VC1_MAIN_get()),
    PROFILE_VC1_COMPLEX(VideoJNI.CodecProfile_PROFILE_VC1_COMPLEX_get()),
    PROFILE_VC1_ADVANCED(VideoJNI.CodecProfile_PROFILE_VC1_ADVANCED_get()),
    PROFILE_MPEG4_SIMPLE(VideoJNI.CodecProfile_PROFILE_MPEG4_SIMPLE_get()),
    PROFILE_MPEG4_SIMPLE_SCALABLE(VideoJNI.CodecProfile_PROFILE_MPEG4_SIMPLE_SCALABLE_get()),
    PROFILE_MPEG4_CORE(VideoJNI.CodecProfile_PROFILE_MPEG4_CORE_get()),
    PROFILE_MPEG4_MAIN(VideoJNI.CodecProfile_PROFILE_MPEG4_MAIN_get()),
    PROFILE_MPEG4_N_BIT(VideoJNI.CodecProfile_PROFILE_MPEG4_N_BIT_get()),
    PROFILE_MPEG4_SCALABLE_TEXTURE(VideoJNI.CodecProfile_PROFILE_MPEG4_SCALABLE_TEXTURE_get()),
    PROFILE_MPEG4_SIMPLE_FACE_ANIMATION(VideoJNI.CodecProfile_PROFILE_MPEG4_SIMPLE_FACE_ANIMATION_get()),
    PROFILE_MPEG4_BASIC_ANIMATED_TEXTURE(VideoJNI.CodecProfile_PROFILE_MPEG4_BASIC_ANIMATED_TEXTURE_get()),
    PROFILE_MPEG4_HYBRID(VideoJNI.CodecProfile_PROFILE_MPEG4_HYBRID_get()),
    PROFILE_MPEG4_ADVANCED_REAL_TIME(VideoJNI.CodecProfile_PROFILE_MPEG4_ADVANCED_REAL_TIME_get()),
    PROFILE_MPEG4_CORE_SCALABLE(VideoJNI.CodecProfile_PROFILE_MPEG4_CORE_SCALABLE_get()),
    PROFILE_MPEG4_ADVANCED_CODING(VideoJNI.CodecProfile_PROFILE_MPEG4_ADVANCED_CODING_get()),
    PROFILE_MPEG4_ADVANCED_CORE(VideoJNI.CodecProfile_PROFILE_MPEG4_ADVANCED_CORE_get()),
    PROFILE_MPEG4_ADVANCED_SCALABLE_TEXTURE(VideoJNI.CodecProfile_PROFILE_MPEG4_ADVANCED_SCALABLE_TEXTURE_get()),
    PROFILE_MPEG4_SIMPLE_STUDIO(VideoJNI.CodecProfile_PROFILE_MPEG4_SIMPLE_STUDIO_get()),
    PROFILE_MPEG4_ADVANCED_SIMPLE(VideoJNI.CodecProfile_PROFILE_MPEG4_ADVANCED_SIMPLE_get()),
  ;

    public final int swigValue() {
      return swigValue;
    }

    public static ProfileType swigToEnum(int swigValue) {
      ProfileType[] swigValues = ProfileType.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (ProfileType swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + ProfileType.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private ProfileType() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private ProfileType(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private ProfileType(ProfileType swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
